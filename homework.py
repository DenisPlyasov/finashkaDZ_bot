# homework.py (—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π email —á–µ—Ä–µ–∑ –∫–æ–¥)
import os
import json
import random
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
HOMEWORK_FILE = os.path.join(DATA_DIR, "homework.json")
VALID_EMAILS_FILE = os.path.join(DATA_DIR, "valid_emails.json")
BLACK_LIST = os.path.join(DATA_DIR, "black_list.json")

# Google Sheets
SCOPE = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
GSHEET_NAME = "homework"
GSHEET_CREDS = "finashkadzbot-d8415e20cc18.json"

# SMTP (–Ω–∞—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–µ–±—è!)
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USER = "finashkadzbot@gmail.com"       # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π email
SMTP_PASSWORD = open('password_mail.txt').readline()      # app password –¥–ª—è SMTP

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n"
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–∫–æ–π.\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)
START_KEYBOARD = InlineKeyboardMarkup(
    [[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]]
)

# -------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------
def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    for p in [USERS_FILE, HOMEWORK_FILE, VALID_EMAILS_FILE, BLACK_LIST]:  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ BLACK_LIST
        if not os.path.exists(p):
            with open(p, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=4)

def load_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# -------------------- Google Sheets --------------------
def connect_gsheet():
    creds = ServiceAccountCredentials.from_json_keyfile_name(GSHEET_CREDS, SCOPE)
    client = gspread.authorize(creds)
    return client.open(GSHEET_NAME)

# -------------------- Google Sheets --------------------
def connect_gsheet():
    creds = ServiceAccountCredentials.from_json_keyfile_name(GSHEET_CREDS, SCOPE)
    client = gspread.authorize(creds)
    return client.open(GSHEET_NAME)

def append_homework_to_sheet(group: str, subject: str, deadline: str, task: str, attachment: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–º–∞—à–∫—É –≤ Google Sheets.
    –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –µ—ë –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏.
    """
    sheet = connect_gsheet()
    group_name = group.strip()

    try:
        ws = sheet.worksheet(group_name)
    except gspread.exceptions.WorksheetNotFound:
        ws = sheet.add_worksheet(title=group_name, rows="100", cols="10")
        ws.append_row(["subject", "deadline", "task", "attachment"])

    ws.append_row([subject, deadline, task, attachment])

def get_homework_from_sheet(group: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–∫—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏.
    """
    sheet = connect_gsheet()
    group_name = group.strip()
    try:
        ws = sheet.worksheet(group_name)
        records = ws.get_all_records()
        return records
    except gspread.exceptions.WorksheetNotFound:
        raise Exception(f"–í Google –¢–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Google Sheets: {e}")

# -------------------- Email --------------------
def send_email_code(email: str, code: str):
    msg = MIMEText(f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
    msg["Subject"] = "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞"
    msg["From"] = SMTP_USER
    msg["To"] = email

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.send_message(msg)

# -------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é --------------------
async def homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="hw_view"),
            InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="hw_upload"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "1Ô∏è‚É£ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∑, –∫–∞–∫–æ–π-—Ç–æ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–∑ –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "1Ô∏è‚É£ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∑, –∫–∞–∫–æ–π-—Ç–æ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–∑ –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",
            reply_markup=reply_markup
        )

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ --------------------
async def homework_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "hw_view":
        await query.edit_message_text("3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò19-6):")
        context.user_data["hw_action"] = "view_group"
        return

    if data == "hw_upload":
        await query.edit_message_text("2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É, —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞")
        context.user_data["hw_action"] = "upload_email"
        return

    if data == "hw_to_menu":
        await query.edit_message_text(START_TEXT, reply_markup=START_KEYBOARD)
        context.user_data.clear()
        return

    if data == "hw_add":
        await query.edit_message_text("2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É, —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞")
        context.user_data["hw_action"] = "upload_email"
        return

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π --------------------
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_dirs()
    msg = update.message
    if msg is None:
        return
    text = (msg.text or "").strip()
    uid = msg.from_user.id

    if "hw_action" not in context.user_data:
        return
    action = context.user_data["hw_action"]

    # ---- –ü—Ä–æ—Å–º–æ—Ç—Ä ----
    if action == "view_group":
        group = text
        try:
            records = get_homework_from_sheet(group)
            if not records:
                kb = InlineKeyboardMarkup([[
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="hw_add"),
                    InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="hw_to_menu")
                ]])
                await msg.reply_text("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–∫–∏.", reply_markup=kb)
            else:
                out = f"üìñ –î–æ–º–∞—à–∫–∞ –¥–ª—è *{group}:*\n\n"
                for r_idx, r in enumerate(records, start=1):
                    subj = r.get("subject", "-")
                    dl = r.get("deadline", "-")
                    task = r.get("task", "-")
                    att = r.get("attachment", "-")
                    out += (
                        f"#{r_idx}\n"
                        f"üìò *{subj}*\n"
                        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {dl}\n"
                        f"‚úèÔ∏è {task}\n"
                        f"üìé {att}\n\n"
                    )
                kb = InlineKeyboardMarkup([[
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="hw_add"),
                    InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="hw_to_menu")
                ]])
                await msg.reply_text(out, parse_mode="Markdown", reply_markup=kb)
        except Exception as e:
            await msg.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        context.user_data.clear()
        return

    # ---- –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email ----
    if action == "upload_email":
        email = text
        if not email.endswith("@edu.fa.ru"):
            await msg.reply_text("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –Ω–∞ @edu.fa.ru")
            return

        valid_emails = load_json(VALID_EMAILS_FILE)
        black_list = load_json(BLACK_LIST)

        # –ï—Å–ª–∏ –≤ –±–∞–Ω–µ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
        if email in black_list:
            await update.message.reply_animation(
                animation="https://i.pinimg.com/originals/5c/81/de/5c81de8be60ed702e94a5fffc682db51.gif",
                caption="–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!"
            )
            return

        entry = valid_emails.get(email)

        # --- –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {"telegram_id": 12345, "verified_at": "..."} ---
        if isinstance(entry, dict) and "telegram_id" in entry:
            if entry["telegram_id"] == uid:
                # –≤–ª–∞–¥–µ–ª–µ—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ, –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ
                context.user_data["email"] = email
                context.user_data["telegram_id"] = uid
                context.user_data["created_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                await msg.reply_text("3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò19-6):")
                context.user_data["hw_action"] = "upload_group"
            else:
                # –≤–ª–∞–¥–µ–ª–µ—Ü –¥—Ä—É–≥–æ–π
                await msg.reply_text(
                    "‚ùå –ü–æ –Ω–∞—à–∏–º –¥–∞–Ω–Ω—ã–º —ç—Ç–∞ –ø–æ—á—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ª–∏ –≤—ã –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
                )
                # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ upload_email
            return

        # --- –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: True ‚Äî –º–∏–≥—Ä–∞—Ü–∏—è –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        if entry is True:
            valid_emails[email] = {
                "telegram_id": uid,
                "verified_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            }
            save_json(VALID_EMAILS_FILE, valid_emails)

            context.user_data["email"] = email
            context.user_data["telegram_id"] = uid
            context.user_data["created_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            await msg.reply_text("3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò19-6):")
            context.user_data["hw_action"] = "upload_group"
            return

        # --- –ù–µ—Ç –∑–∞–ø–∏—Å–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ ---
        code = str(random.randint(100000, 999999))
        context.user_data["pending_email"] = email
        context.user_data["pending_code"] = code
        try:
            send_email_code(email, code)
            await msg.reply_text(
                "–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—á—É—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. "
            )
            context.user_data["hw_action"] = "verify_code"
        except Exception as e:
            await msg.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {e}")
        return

    if action == "verify_code":
        if text == context.user_data.get("pending_code"):
            email = context.user_data["pending_email"]
            valid_emails = load_json(VALID_EMAILS_FILE)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: email -> {telegram_id, verified_at}
            valid_emails[email] = {
                "telegram_id": msg.from_user.id,
                "verified_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            }
            save_json(VALID_EMAILS_FILE, valid_emails)

            context.user_data["email"] = email
            context.user_data["telegram_id"] = msg.from_user.id
            context.user_data["created_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            await msg.reply_text("‚úÖ –ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò19-6):")
            context.user_data["hw_action"] = "upload_group"
        else:
            await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # ---- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î–ó ----
    if action == "upload_group":
        context.user_data["group"] = text
        users = load_json(USERS_FILE)
        users[str(uid)] = {
            "email": context.user_data["email"],
            "group": text,
            "telegram_id": uid,
            "created_at": context.user_data["created_at"]
        }
        save_json(USERS_FILE, users)
        await msg.reply_text("üìò –ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –¥–æ–º–∞—à–∫–∞?")
        context.user_data["hw_action"] = "upload_subject"
        return

    if action == "upload_subject":
        context.user_data["subject"] = text
        await msg.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.09.2025):")
        context.user_data["hw_action"] = "upload_deadline"
        return

    if action == "upload_deadline":
        context.user_data["deadline"] = text
        await msg.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        context.user_data["hw_action"] = "upload_task"
        return

    if action == "upload_task":
        context.user_data["task"] = text
        await msg.reply_text("üìé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (–∏–ª–∏ '–Ω–µ—Ç'):")
        context.user_data["hw_action"] = "upload_attachment"
        return

    if action == "upload_attachment":
        attachment = text if text.lower() != "–Ω–µ—Ç" else "-"
        context.user_data["attachment"] = attachment

        hw_data = load_json(HOMEWORK_FILE)
        new_id = str(len(hw_data) + 1)
        entry = {
            "id": new_id,
            "user_id": context.user_data["telegram_id"],
            "email": context.user_data["email"],
            "group": context.user_data["group"],
            "subject": context.user_data["subject"],
            "deadline": context.user_data["deadline"],
            "task": context.user_data["task"],
            "attachment": attachment,
            "created_at": context.user_data["created_at"]
        }
        hw_data[new_id] = entry
        save_json(HOMEWORK_FILE, hw_data)

        try:
            append_homework_to_sheet(
                entry["group"], entry["subject"], entry["deadline"],
                entry["task"], entry["attachment"]
            )
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="hw_add"),
                InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="hw_to_menu")
            ]])
            await msg.reply_text(
                "‚úÖ –î–æ–º–∞—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –µ–µ —É–≤–∏–¥–µ—Ç—å",
                reply_markup=kb
            )
        except Exception as e:
            await msg.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

        context.user_data.clear()
        return

# –í—Å—Ç–∞–≤—å—Ç–µ/–∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É –≤–µ—Ä—Å–∏—é –≤ homework.py
import re
from datetime import datetime, timedelta

async def send_homework_for_date(update, context, group: str, date_str: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –∏–∑ Google Sheets –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –¥–∞—Ç—ã (–î–î.MM.–ì–ì–ì–ì)."""
    try:
        try:
            homework_list = get_homework_from_sheet(group) or []
        except Exception:
            return

        def _normalize_deadline(dl):
            if dl is None:
                return ""
            if isinstance(dl, dict):
                for k in ("deadline", "date", "day", "date_str", "start", "datetime", "value", "raw"):
                    if k in dl and dl[k]:
                        nd = _normalize_deadline(dl[k])
                        if nd:
                            return nd
                if all(k in dl for k in ("year", "month", "day")):
                    try:
                        return datetime(int(dl["year"]), int(dl["month"]), int(dl["day"])).strftime("%d.%m.%Y")
                    except Exception:
                        pass
                return ""
            if isinstance(dl, (list, tuple)):
                for it in dl:
                    nd = _normalize_deadline(it)
                    if nd:
                        return nd
                return ""
            if isinstance(dl, (int, float)):
                try:
                    base = datetime(1899, 12, 30)
                    date = base + timedelta(days=int(dl))
                    return date.strftime("%d.%m.%Y")
                except Exception:
                    return str(dl)
            if isinstance(dl, datetime):
                return dl.strftime("%d.%m.%Y")
            if isinstance(dl, str):
                s = dl.strip()
                if not s:
                    return ""
                fmts = [
                    "%d.%m.%Y", "%d.%m.%y", "%Y-%m-%d", "%Y.%m.%d", "%Y/%m/%d",
                    "%d/%m/%Y", "%m/%d/%Y", "%Y-%m-%dT%H:%M:%S.%fZ", "%Y-%m-%dT%H:%M:%S"
                ]
                for fmt in fmts:
                    try:
                        return datetime.strptime(s, fmt).strftime("%d.%m.%Y")
                    except Exception:
                        pass
                m = re.search(r"(\d{4})[.\-\/](\d{1,2})[.\-\/](\d{1,2})", s)
                if m:
                    y, mo, day = m.groups()
                    return f"{int(day):02d}.{int(mo):02d}.{int(y)}"
                m2 = re.search(r"(\d{1,2})[.\-\/](\d{1,2})[.\-\/](\d{4})", s)
                if m2:
                    dd, mm, yyyy = m2.groups()
                    return f"{int(dd):02d}.{int(mm):02d}.{int(yyyy)}"
                return s
            return str(dl)

        todays_hw = []
        for hw in homework_list:
            if not isinstance(hw, dict):
                continue
            raw_deadline = hw.get("deadline")
            norm = _normalize_deadline(raw_deadline)
            if not norm:
                for alt in ("date", "deadline_date", "due", "due_date"):
                    norm = _normalize_deadline(hw.get(alt))
                    if norm:
                        break
            if norm == date_str:
                todays_hw.append(hw)

        if not todays_hw:
            return

        text_lines = [f"üß© <b>–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ {date_str}:</b>"]
        for hw in todays_hw:
            subject = hw.get("subject", "-")
            task = hw.get("task", "-")
            dl_out = hw.get("deadline", "-")
            att = hw.get("attachment", "")
            text_lines.append(f"üìò <b>{subject}</b>: {task} (–¥–æ {dl_out})")
            if att and att != "-":
                text_lines.append(f"üìé {att}")

        text = "\n".join(text_lines)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode="HTML")

    except Exception:
        return
