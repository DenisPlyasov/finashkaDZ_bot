# homework.py (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ —Ñ–∞–π–ª—ã)
import os
import json
from datetime import datetime
from pathlib import Path

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
HOMEWORK_FILE = os.path.join(DATA_DIR, "homework.json")

# Google Sheets
SCOPE = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
GSHEET_NAME = "homework"                       
GSHEET_CREDS = "finashkadzbot-d8415e20cc18.json"  

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n"
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–∫–æ–π.\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)
START_KEYBOARD = InlineKeyboardMarkup(
    [[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]]
)

# -------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------
def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    for p in [USERS_FILE, HOMEWORK_FILE]:
        if not os.path.exists(p):
            with open(p, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=4)

def load_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# -------------------- Google Sheets --------------------
def connect_gsheet():
    creds = ServiceAccountCredentials.from_json_keyfile_name(GSHEET_CREDS, SCOPE)
    client = gspread.authorize(creds)
    return client.open(GSHEET_NAME)

def append_homework_to_sheet(group: str, subject: str, deadline: str, task: str, attachment: str):
    sheet = connect_gsheet()
    ws = sheet.worksheet(group.strip())
    ws.append_row([subject, deadline, task, attachment])

def get_homework_from_sheet(group: str):
    sheet = connect_gsheet()
    try:
        ws = sheet.worksheet(group.strip())
        records = ws.get_all_records()
        return records
    except gspread.exceptions.WorksheetNotFound:
        raise Exception(f"–í Google –¢–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Google Sheets: {e}")

# -------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é --------------------
async def homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="hw_view"),
            InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="hw_upload"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üìö –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å?",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üìö –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å?",
            reply_markup=reply_markup
        )

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ --------------------
async def homework_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "hw_view":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–ò25-1):")
        context.user_data["hw_action"] = "view_group"
        return

    if data == "hw_upload":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É:")
        context.user_data["hw_action"] = "upload_email"
        return

    if data == "hw_to_menu":
        await query.edit_message_text(START_TEXT, reply_markup=START_KEYBOARD)
        context.user_data.clear()
        return

    if data == "hw_add":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É:")
        context.user_data["hw_action"] = "upload_email"
        return

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π --------------------
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_dirs()
    msg = update.message
    if msg is None:
        return
    text = (msg.text or "").strip()
    uid = msg.from_user.id

    if "hw_action" not in context.user_data:
        return

    action = context.user_data["hw_action"]

    # ---- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–∫–∏ ----
    if action == "view_group":
        group = text
        try:
            records = get_homework_from_sheet(group)
            if not records:
                kb = InlineKeyboardMarkup([[
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="hw_add"),
                    InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="hw_to_menu")
                ]])
                await msg.reply_text("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–∫–∏.", reply_markup=kb)
            else:
                out = f"üìñ –î–æ–º–∞—à–∫–∞ –¥–ª—è *{group}:*\n\n"
                for r_idx, r in enumerate(records, start=1):
                    subj = r.get("subject", "-")
                    dl = r.get("deadline", "-")
                    task = r.get("task", "-")
                    att = r.get("attachment", "-")
                    out += (
                        f"#{r_idx}\n"
                        f"üìò *{subj}*\n"
                        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {dl}\n"
                        f"‚úèÔ∏è {task}\n"
                        f"üìé {att}\n\n"
                    )
                kb = InlineKeyboardMarkup([[
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="hw_add"),
                    InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="hw_to_menu")
                ]])
                await msg.reply_text(out, parse_mode="Markdown", reply_markup=kb)
        except Exception as e:
            await msg.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        context.user_data.clear()
        return

    # ---- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–∞—à–∫–∏ ----
    if action == "upload_email":
        context.user_data["email"] = text
        context.user_data["telegram_id"] = uid
        context.user_data["created_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        users = load_json(USERS_FILE)
        users[str(uid)] = {"email": text, "group": None, "telegram_id": uid, "created_at": context.user_data["created_at"]}
        save_json(USERS_FILE, users)
        await msg.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–ò25-1):")
        context.user_data["hw_action"] = "upload_group"
        return

    if action == "upload_group":
        context.user_data["group"] = text
        users = load_json(USERS_FILE)
        users[str(uid)]["group"] = text
        save_json(USERS_FILE, users)
        await msg.reply_text("üìò –ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –¥–æ–º–∞—à–∫–∞?")
        context.user_data["hw_action"] = "upload_subject"
        return

    if action == "upload_subject":
        context.user_data["subject"] = text
        await msg.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.09.2025):")
        context.user_data["hw_action"] = "upload_deadline"
        return

    if action == "upload_deadline":
        context.user_data["deadline"] = text
        await msg.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        context.user_data["hw_action"] = "upload_task"
        return

    if action == "upload_task":
        context.user_data["task"] = text
        await msg.reply_text("üìé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. "
                             "–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        context.user_data["hw_action"] = "upload_attachment"
        return

    if action == "upload_attachment":
        attachment = text if text.lower() != "–Ω–µ—Ç" else "-"
        context.user_data["attachment"] = attachment

        hw_data = load_json(HOMEWORK_FILE)
        new_id = str(len(hw_data) + 1)
        entry = {
            "id": new_id,
            "user_id": context.user_data["telegram_id"],
            "email": context.user_data["email"],
            "group": context.user_data["group"],
            "subject": context.user_data["subject"],
            "deadline": context.user_data["deadline"],
            "task": context.user_data["task"],
            "attachment": attachment,
            "created_at": context.user_data["created_at"]
        }
        hw_data[new_id] = entry
        save_json(HOMEWORK_FILE, hw_data)

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ Google Sheets
        try:
            append_homework_to_sheet(
                entry["group"], entry["subject"], entry["deadline"],
                entry["task"], entry["attachment"]
            )
            # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="hw_add"),
                InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="hw_to_menu")
            ]])
            await msg.reply_text(
                "‚úÖ –î–æ–º–∞—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ!",
                reply_markup=kb
            )
        except Exception as e:
            await msg.reply_text(
                f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets: {e}"
            )

    context.user_data.clear()
    return
