# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
from telegram.constants import ParseMode
import json
import os
from datetime import datetime, timedelta, time as dtime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes
from fa_api import FaAPI  # —Ç–≤–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
from homework import send_homework_for_date
from schedule_groups import _to_api_date, _filter_lessons_by_date, _fmt_day

fa = FaAPI()  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API

FAV_FILE = "favorites.json"

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n"
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–∫–æ–π.\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)
START_KEYBOARD = InlineKeyboardMarkup(
    [[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]]
)


# --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö ---
def load_favorites():
    if not os.path.exists(FAV_FILE):
        return {}
    with open(FAV_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_favorites(data):
    with open(FAV_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if q:
        await q.answer()
    text = (
        "‚öôÔ∏è <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
        "–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = [
        [InlineKeyboardButton("üïì –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="choose_notify_time")],
        [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="choose_notify_day")],
        [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_schedule")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if q:
        await q.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")


# --- –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def choose_notify_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    user_id = str(update.effective_user.id)
    data = load_favorites()
    user_data = data.get(user_id, {})
    selected = set(user_data.get("notify_times", []))

    times = [f"{h:02d}:00" for h in range(6, 24)]
    keyboard = []
    for t in times:
        label = f"‚úÖ {t}" if t in selected else t
        keyboard.append([InlineKeyboardButton(label, callback_data=f"toggle_time_{t}")])
    keyboard.append([InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")])

    await q.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –í—ã–±–æ—Ä –¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def choose_notify_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    text = "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
    keyboard = [
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="set_day_today"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="set_day_tomorrow"),
        ],
        [InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")]
    ]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ---
async def set_day_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    user_id = str(update.effective_user.id)
    data = load_favorites()
    user_data = data.setdefault(user_id, {})
    user_data["schedule_day"] = "today"
    save_favorites(data)

    text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ <b>—Å–µ–≥–æ–¥–Ω—è</b>."
    keyboard = [[InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")]]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ---
async def set_day_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    user_id = str(update.effective_user.id)
    data = load_favorites()
    user_data = data.setdefault(user_id, {})
    user_data["schedule_day"] = "tomorrow"
    save_favorites(data)

    text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ <b>–∑–∞–≤—Ç—Ä–∞</b>."
    keyboard = [[InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")]]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")


# --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–≥–∞–ª–æ—á–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç—Å—è/–≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è) ---
async def toggle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    time_str = q.data.replace("toggle_time_", "")

    user_id = str(update.effective_user.id)
    data = load_favorites()
    user_data = data.setdefault(user_id, {})
    times = set(user_data.get("notify_times", []))

    if time_str in times:
        times.remove(time_str)
    else:
        times.add(time_str)

    user_data["notify_times"] = sorted(times)
    save_favorites(data)
    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
    register_notification_jobs(context.application)

    await choose_notify_time(update, context)


# --- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def disable_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    user_id = str(update.effective_user.id)
    data = load_favorites()
    user_data = data.get(user_id)
    if user_data:
        user_data["notify_times"] = []
        save_favorites(data)

    # —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ JobQueue
    for job in context.application.job_queue.jobs():
        if job.data and job.data.get("user_id") == int(user_id):
            job.schedule_removal()

    await q.edit_message_text(
        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    )


# --- –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –¥–∑ ---
async def send_notifications(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    if not chat_id:
        # –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞—Ç–∞ ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º
        return
    chat_id = int(chat_id)
    today = datetime.now().date()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with open(FAV_FILE, "r", encoding="utf-8") as f:
            favorites = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        favorites = {}

    user_data = favorites.get(str(chat_id))
    if not user_data or "groups" not in user_data or not user_data["groups"]:
        await context.bot.send_message(chat_id, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≤—Ç—Ä–∞)
    day_pref = user_data.get("schedule_day", "tomorrow")
    if day_pref == "today":
        target_date = today
    else:
        target_date = today + timedelta(days=1)

    ds = _to_api_date(target_date)

    # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∑
    for group in user_data["groups"]:
        gid = group.get("id")
        gname = group.get("name")

        if not gid or not gname:
            continue

        try:
            raw = fa.timetable_group(gid)  # –≤—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç fa
            lessons = _filter_lessons_by_date(raw, ds)
            text = _fmt_day(ds, lessons, gname)

            # 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=ParseMode.HTML
            )

            # 2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            date_str = target_date.strftime("%d.%m.%Y")
            try:
                await send_homework_for_date(None, context, gname, date_str)
            except Exception as e:
                print(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –î–ó –¥–ª—è {gname}: {e}")

        except Exception as e:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {gname}: {e}"
            )


def register_notification_jobs(application):
    """–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    import datetime as _dt
    import zoneinfo

    tz = getattr(application.job_queue, "timezone", zoneinfo.ZoneInfo("Europe/Moscow"))
    now = _dt.datetime.now(tz)
    data = load_favorites()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for job in application.job_queue.jobs():
        if job.data and str(job.data.get("user_id")) in data:
            job.schedule_removal()

    for user_id, info in data.items():
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not info.get("groups"):
            continue

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not info.get("schedule_day"):
            info["schedule_day"] = "tomorrow"
            save_favorites(data)
        if not info.get("notify_times"):
            info["notify_times"] = ["19:00"]
            save_favorites(data)

        for t in info.get("notify_times", []):
            h, m = map(int, t.split(":"))
            target = now.replace(hour=h, minute=m, second=0, microsecond=0)

            # –†–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ)
            if target > now:
                application.job_queue.run_once(
                    send_notifications,
                    when=(target - now).total_seconds(),
                    data={"user_id": int(user_id)},
                    chat_id=int(user_id),
                    name=f"notify_{user_id}_{t}_once",
                )

            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            application.job_queue.run_daily(
                send_notifications,
                time=_dt.time(hour=h, minute=m),
                data={"user_id": int(user_id)},
                chat_id=int(user_id),
                name=f"notify_{user_id}_{t}_daily",
            )


# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (–ø–ª–∞–≤–Ω–æ, –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è) ---
async def back_to_schedule_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    q = update.callback_query
    await q.answer()

    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
        "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö –∏ –¥–∑, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø.\n"
        "–ú—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–µ—Ç–∞ —Ç–µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ: @question_finashkadzbot\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
    )

    keyboard = [
        [
            InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
            InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
            InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
        ]
    ]

    await q.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )


async def back_to_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await settings_menu(update, context)


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
def add_settings_handlers(app):
    app.add_handler(CallbackQueryHandler(settings_menu, pattern=r"^settings$"))
    app.add_handler(CallbackQueryHandler(choose_notify_time, pattern=r"^choose_notify_time$"))
    app.add_handler(CallbackQueryHandler(toggle_time, pattern=r"^toggle_time_"))
    app.add_handler(CallbackQueryHandler(disable_notifications, pattern=r"^disable_notifications$"))
    app.add_handler(CallbackQueryHandler(choose_notify_day, pattern=r"^choose_notify_day$"))
    app.add_handler(CallbackQueryHandler(set_day_today, pattern=r"^set_day_today$"))
    app.add_handler(CallbackQueryHandler(set_day_tomorrow, pattern=r"^set_day_tomorrow$"))
    app.add_handler(CallbackQueryHandler(back_to_schedule_menu, pattern=r"^back_to_schedule$"))
    app.add_handler(CallbackQueryHandler(back_to_settings, pattern=r"^settings_back$"))