# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
from telegram.constants import ParseMode
import json
import os
from datetime import datetime, timedelta, time as dtime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes
from fa_api import FaAPI  # —Ç–≤–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
from homework import send_homework_for_date
from schedule_groups import _to_api_date, _filter_lessons_by_date, _fmt_day as fmt_group_day
from teachers_schedule import _fmt_day as fmt_teacher_day
fa = FaAPI()  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API

FAV_FILE = os.path.join(os.path.dirname(__file__), "favorites.json")

def _chat_id_from_key(key) -> int | None:
    """
    key: 'u:123', 'g:-4913426882' –∏–ª–∏ '123'
    -> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int chat_id –∏–ª–∏ None
    """
    if key is None:
        return None
    s = str(key)
    if s.startswith(("u:", "g:")):
        s = s.split(":", 1)[1]
    try:
        return int(s)
    except Exception:
        return None

def migrate_favorites_keys():
    try:
        with open(FAV_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        data = {}

    if not isinstance(data, dict):
        return

    changed = False
    keys = list(data.keys())

    for key in keys:
        if isinstance(key, str) and key.startswith(("u:", "g:")):
            pure = key.split(":", 1)[1]  # "u:123" -> "123"
            old = data.get(key) or {}
            new = data.get(pure) or {}

            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –º—ë—Ä–∂–∏–º –≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–æ–≤ –±–µ–∑ –¥—É–±–ª–µ–π –ø–æ id
            for field in ("groups", "teachers"):
                old_list = old.get(field) or []
                new_list = new.get(field) or []
                seen = {str(x.get("id")) for x in new_list if isinstance(x, dict)}
                for item in old_list:
                    if isinstance(item, dict) and str(item.get("id")) not in seen:
                        new_list.append(item)
                        seen.add(str(item.get("id")))
                if new_list:
                    new[field] = new_list

            # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ
            if "schedule_day" not in new and "schedule_day" in old:
                new["schedule_day"] = old["schedule_day"]
            if "notify_times" not in new and "notify_times" in old:
                new["notify_times"] = old["notify_times"]

            data[pure] = new
            del data[key]
            changed = True

    if changed:
        with open(FAV_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

def get_owner_key(update: Update) -> str:
    chat = update.effective_chat
    if chat and chat.type in ("group", "supergroup"):
        return str(chat.id)              # –ë–ï–ó "g:"
    return str(update.effective_user.id) # –ë–ï–ó "u:"

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n"
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–∫–æ–π.\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)
START_KEYBOARD = InlineKeyboardMarkup(
    [[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]]
)

_RU_WEEKDAY_ACC = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–≤—Ç–æ—Ä–Ω–∏–∫", 2: "—Å—Ä–µ–¥—É",
    3: "—á–µ—Ç–≤–µ—Ä–≥", 4: "–ø—è—Ç–Ω–∏—Ü—É", 5: "—Å—É–±–±–æ—Ç—É", 6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

def _mins(hhmm: str) -> int:
    h, m = map(int, hhmm.split(":"))
    return h * 60 + m

def _weekday_acc(date_iso: str) -> str:
    # date_iso: "YYYY-MM-DD" (—á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç timetable_teacher)
    d = datetime.fromisoformat(date_iso)
    return _RU_WEEKDAY_ACC[d.weekday()]

def _s(x):  # safe str
    return (x or "").strip()

def _fmt_day_teacher(records: list[dict], teacher_fallback: str = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") -> str:
    if not records:
        return "–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    try:
        records = sorted(records, key=lambda r: _mins(_s(r.get("beginLesson"))))
    except Exception:
        pass

    date_iso = _s(records[0].get("date"))  # "YYYY-MM-DD"
    teacher = (
        _s(records[0].get("lecturer_title"))
        or _s(records[0].get("lecturer"))
        or teacher_fallback
    )
    email = ""
    for r in records:
        e = _s(r.get("lecturerEmail"))
        if e:
            email = e
            break

    lines = [
        f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {teacher} –Ω–∞ {_weekday_acc(date_iso)}</b>",
        f"({date_iso}):",
        ""
    ]

    for i, r in enumerate(records):
        b = _s(r.get("beginLesson"))
        e = _s(r.get("endLesson"))
        grp = _s(r.get("group"))
        aud = _s(r.get("auditorium"))
        kind = _s(r.get("kindOfWork"))
        subj = _s(r.get("discipline"))

        right = " ‚Äî ".join(x for x in (grp, aud) if x)
        line1 = f"<b>{b}‚Äì{e}</b>" + (f". {right}." if right else ".")
        kind_lc = kind.lower()
        hint = "—Å–µ–º–∏–Ω–∞—Ä" if "—Å–µ–º–∏–Ω–∞—Ä" in kind_lc else ("–ª–µ–∫—Ü–∏—è" if "–ª–µ–∫—Ü" in kind_lc else "")
        line2 = f"{subj} ({hint})." if hint else (f"{subj}." if subj else "")

        u1, u2 = _s(r.get("url1")), _s(r.get("url2"))
        if u1.startswith("http"):
            line1 += f' (<a href="{u1}">–æ–Ω–ª–∞–π–Ω</a>)'
        if u2.startswith("http"):
            line1 += f' (<a href="{u2}">–æ–Ω–ª–∞–π–Ω</a>)'

        lines.append(line1)
        if line2:
            lines.append(line2)

        if i + 1 < len(records):
            nb = _s(records[i + 1].get("beginLesson"))
            if e and nb:
                try:
                    gap = _mins(nb) - _mins(e)
                    if gap > 0:
                        lines.append(f"<i>–ü–µ—Ä–µ—Ä—ã–≤ {gap} –º–∏–Ω—É—Ç.</i>")
                except Exception:
                    pass
        lines.append("")

    if email:
        lines.append(f"<b>Email:</b> <a href=\"mailto:{email}\">{email}</a>")

    return "\n".join(lines).strip()



def _ensure_defaults(user_id: str):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ—Ñ–æ–ª—Ç—ã schedule_day='tomorrow' –∏ notify_times=['19:00'].
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user_data, changed), –≥–¥–µ changed=True –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥–æ–ø–∏—Å–∞–ª–∏.
    """
    data = load_favorites()
    user_data = data.setdefault(user_id, {})
    changed = False

    # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–µ–Ω—å
    if not user_data.get("schedule_day"):
        user_data["schedule_day"] = "tomorrow"
        changed = True

    # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    times = user_data.get("notify_times")
    if not times:
        user_data["notify_times"] = ["19:00"]
        changed = True

    if changed:
        save_favorites(data)
    return user_data, changed

def load_favorites():
    if not os.path.exists(FAV_FILE):
        return {}
    try:
        with open(FAV_FILE, "r", encoding="utf-8") as f:
            d = json.load(f)
            return d if isinstance(d, dict) else {}
    except Exception:
        return {}

def save_favorites(d: dict):
    with open(FAV_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

def ensure_defaults_for_user(user_id: int) -> bool:
    """
    –°—Ç–∞–≤–∏—Ç schedule_day='tomorrow' –∏ notify_times=['19:00'], –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏/–¥–æ–ø–∏—Å–∞–ª–∏.
    """
    uid = str(user_id)
    data = load_favorites()
    user = data.setdefault(uid, {})
    changed = False
    if not user.get("schedule_day"):
        user["schedule_day"] = "tomorrow"
        changed = True
    if not user.get("notify_times"):
        user["notify_times"] = ["19:00"]
        changed = True
    if changed:
        save_favorites(data)
    return changed

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if q:
        await q.answer()
    text = (
        "‚öôÔ∏è <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
        "–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = [
        [InlineKeyboardButton("üïì –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="choose_notify_time")],
        [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="choose_notify_day")],
        [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_schedule")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if q:
        await q.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")


# --- –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def choose_notify_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if q:
        await q.answer()
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        return

    owner_key = get_owner_key(update)

    # ‚Üê –≤–æ—Ç —Ç—É—Ç –∞–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–∏–º tomorrow/19:00, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    user_data, changed = _ensure_defaults(owner_key)
    if changed:
        # —Ä–∞–∑ –¥–µ—Ñ–æ–ª—Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–∏ ‚Äî —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á–∏
        register_notification_jobs(context.application)

    selected = set(user_data.get("notify_times", []))

    times = [f"{h:02d}:00" for h in range(6, 24)]
    keyboard = []
    for t in times:
        label = f"‚úÖ {t}" if t in selected else t
        keyboard.append([InlineKeyboardButton(label, callback_data=f"toggle_time_{t}")])

    keyboard.append([InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")])

    await q.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –µ–≥–æ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥—Å–≤–µ—á–µ–Ω–æ 19:00.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –í—ã–±–æ—Ä –¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def choose_notify_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    text = "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
    keyboard = [
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="set_day_today"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="set_day_tomorrow"),
        ],
        [InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")]
    ]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ---
async def set_day_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    owner_key = get_owner_key(update)
    data = load_favorites()
    user_data = data.setdefault(owner_key, {})
    user_data["schedule_day"] = "today"  # –∏–ª–∏ "tomorrow"
    save_favorites(data)

    text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ <b>—Å–µ–≥–æ–¥–Ω—è</b>."
    keyboard = [[InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")]]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ---
async def set_day_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    owner_key = get_owner_key(update)
    data = load_favorites()
    user_data = data.setdefault(owner_key, {})
    user_data["schedule_day"] = "tomorrow" # –∏–ª–∏ "tomorrow"
    save_favorites(data)

    text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ <b>–∑–∞–≤—Ç—Ä–∞</b>."
    keyboard = [[InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")]]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")


async def toggle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    time_str = q.data.replace("toggle_time_", "")

    owner_key = get_owner_key(update)
    data = load_favorites()
    user_data = data.setdefault(owner_key, {})
    times = set(user_data.get("notify_times", []))

    if time_str in times:
        times.remove(time_str)
    else:
        times.add(time_str)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (—á—Ç–æ–±—ã 09:00 –Ω–µ —à–ª–æ –ø–æ—Å–ª–µ 19:00)
    def time_key(s):
        h, m = map(int, s.split(":"))
        return h * 60 + m

    user_data["notify_times"] = sorted(times, key=time_key)
    save_favorites(data)
    register_notification_jobs(context.application)

    await choose_notify_time(update, context)


# --- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def disable_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    owner_key = get_owner_key(update)

    data = load_favorites()
    user_data = data.get(owner_key)
    if user_data:
        user_data["notify_times"] = []
        save_favorites(data)

    # —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É owner_key
    for job in context.application.job_queue.jobs():
        jd = getattr(job, "data", None) or {}
        same_by_data = jd.get("user_id") and int(jd["user_id"]) == int(owner_key)
        same_by_chat = getattr(job, "chat_id", None) and int(job.chat_id) == int(owner_key)
        if same_by_data or same_by_chat:
            job.schedule_removal()

    await q.edit_message_text(
        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    )

async def clear_notify_times(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    owner_key = get_owner_key(update)

    data = load_favorites()
    user_data = data.get(owner_key)
    if user_data:
        user_data["notify_times"] = []
        save_favorites(data)

    # —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É owner_key
    for job in context.application.job_queue.jobs():
        jd = getattr(job, "data", None) or {}
        same_by_data = jd.get("user_id") and int(jd["user_id"]) == int(owner_key)
        same_by_chat = getattr(job, "chat_id", None) and int(job.chat_id) == int(owner_key)
        if same_by_data or same_by_chat:
            job.schedule_removal()

    await q.edit_message_text("‚úÖ –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–Ω—è—Ç—ã.\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="settings_back")]]))

# --- –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –¥–∑ ---
async def send_notifications(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    if not chat_id:
        return
    chat_id = int(chat_id)

    today = datetime.now().date()

    # favorites.json
    try:
        with open(FAV_FILE, "r", encoding="utf-8") as f:
            favorites = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        favorites = {}

    user_data = (
            favorites.get(str(chat_id)) or
            favorites.get(f"u:{chat_id}") or
            favorites.get(f"g:{chat_id}") or
            {}
    )
    fav_groups   = user_data.get("groups")   or []
    fav_teachers = user_data.get("teachers") or []

    if not fav_groups and not fav_teachers:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        )
        return

    # –∫–∞–∫–æ–π –¥–µ–Ω—å —à–ª—ë–º
    day_pref   = user_data.get("schedule_day", "tomorrow")
    target_date = today if day_pref == "today" else (today + timedelta(days=1))
    ds_api   = _to_api_date(target_date)          # "YYYY.MM.DD"
    day_iso  = target_date.strftime("%Y-%m-%d")   # "YYYY-MM-DD"
    date_hum = target_date.strftime("%d.%m.%Y")
    if target_date.weekday() == 6:
        return
    # --- 1) –≥—Ä—É–ø–ø—ã
    for group in fav_groups:
        gid = group.get("id")
        gname = group.get("name")
        if not gid or not gname:
            continue

        try:
            raw = fa.timetable_group(gid, ds_api, ds_api)
            lessons = _filter_lessons_by_date(raw, ds_api)
            text = fmt_group_day(ds_api, lessons, gname)

            await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)

            # –µ—Å–ª–∏ —Ç–≤–æ—è send_homework_for_date –ø—Ä–∏–Ω–∏–º–∞–µ—Ç chat_id ‚Äî –æ—Å—Ç–∞–≤—å –∞—Ä–≥—É–º–µ–Ω—Ç; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —É–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
            try:
                date_str = target_date.strftime("%d.%m.%Y")
                await send_homework_for_date(None, context, gname, date_str, chat_id=chat_id)
            except Exception:
                pass

        except Exception as e:
            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {gname}: {e}")

    # --- 2) –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (–≤–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º fmt_teacher_day –∏–∑ teachers_schedule)
    for teacher in fav_teachers:
        tid = teacher.get("id")
        tname = teacher.get("name") or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        if not tid:
            continue

        try:
            raw = fa.timetable_teacher(tid, ds_api, ds_api)  # —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –¥–µ–Ω—å/–¥–∏–∞–ø–∞–∑–æ–Ω
            day_records = [r for r in (raw or []) if (r.get("date") or "").strip() == day_iso]

            # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ—á—å-–≤-—Ç–æ—á—å –∫–∞–∫ –≤ –º–æ–¥—É–ª–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            if day_records:
                text = fmt_teacher_day(day_records, teacher_fallback=tname)
            else:
                text = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {tname} –Ω–∞ {day_iso}</b>\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

            await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)

        except Exception as e:
            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {tname}: {e}")

def register_notification_jobs(application):
    import datetime as _dt
    import zoneinfo

    tz = getattr(application.job_queue, "timezone", zoneinfo.ZoneInfo("Europe/Moscow"))
    now = _dt.datetime.now(tz)
    data = load_favorites() or {}

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
    for job in application.job_queue.jobs():
        jd = getattr(job, "data", None)
        # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —á–∏—Å—Ç–∏—Ç—å, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ jd.get("user_id")

    for owner_key, info in data.items():
        # –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not (info.get("groups") or info.get("teachers")):
            continue

        chat_id = _chat_id_from_key(owner_key)
        if chat_id is None:
            continue

        notify_times = info.get("notify_times") or ["19:00"]
        for t in notify_times:
            try:
                h, m = map(int, t.split(":"))
            except Exception:
                continue

            target = now.replace(hour=h, minute=m, second=0, microsecond=0)

            # —Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏
            if target > now:
                application.job_queue.run_once(
                    send_notifications,
                    when=(target - now).total_seconds(),
                    data={"user_id": chat_id},     # –í JOB ‚Äî –ß–ò–°–õ–û–í–û–ô chat_id
                    chat_id=chat_id,
                    name=f"notify_{str(owner_key).replace(':','')}_{t}_once",
                )

            # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
            application.job_queue.run_daily(
                send_notifications,
                time=_dt.time(hour=h, minute=m),
                data={"user_id": chat_id},         # –í JOB ‚Äî –ß–ò–°–õ–û–í–û–ô chat_id
                chat_id=chat_id,
                name=f"notify_{str(owner_key).replace(':','')}_{t}_daily",
            )



# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (–ø–ª–∞–≤–Ω–æ, –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è) ---
async def back_to_schedule_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    q = update.callback_query
    await q.answer()

    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
        "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö –∏ –¥–∑, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø.\n"
        "–ú—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–µ—Ç–∞ —Ç–µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ: @question_finashkadzbot\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
    )

    keyboard = [
        [
            InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
            InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
            InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
        ]
    ]

    await q.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )


async def back_to_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await settings_menu(update, context)


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
def add_settings_handlers(app):
    app.add_handler(CallbackQueryHandler(settings_menu, pattern=r"^settings$"))
    # –ª–æ–≤–∏–º –∏ –±–æ–ª–µ–µ —Å–≤–æ–±–æ–¥–Ω—ã–π matches 'settings' ‚Äî –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ callback –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    app.add_handler(CallbackQueryHandler(settings_menu, pattern=r"settings"))
    app.add_handler(CallbackQueryHandler(choose_notify_time, pattern=r"^choose_notify_time$"))
    app.add_handler(CallbackQueryHandler(toggle_time, pattern=r"^toggle_time_"))
    app.add_handler(CallbackQueryHandler(clear_notify_times, pattern=r"^clear_notify_times$"))
    app.add_handler(CallbackQueryHandler(disable_notifications, pattern=r"^disable_notifications$"))
    app.add_handler(CallbackQueryHandler(choose_notify_day, pattern=r"^choose_notify_day$"))
    app.add_handler(CallbackQueryHandler(set_day_today, pattern=r"^set_day_today$"))
    app.add_handler(CallbackQueryHandler(set_day_tomorrow, pattern=r"^set_day_tomorrow$"))
    app.add_handler(CallbackQueryHandler(back_to_schedule_menu, pattern=r"^back_to_schedule$"))
    app.add_handler(CallbackQueryHandler(back_to_settings, pattern=r"^settings_back$"))