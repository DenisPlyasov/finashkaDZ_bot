import asyncio
import logging
from datetime import datetime, timedelta
from collections import defaultdict
import re
import os, json, threading
_TFAV_FILE = os.path.join(os.path.dirname(__file__), "favorites_teachers.json")
_TFAV_LOCK = threading.Lock()
from telegram.error import BadRequest
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)
from fa_api import FaAPI

WELCOME_TEXT_MAIN = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö –∏ –¥–∑, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø.\n"
    "–ú—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–µ—Ç–∞ —Ç–µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ: @crop_uhar\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)

def _main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]])

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ ======
ASK_TEACHER, CHOOSE_TEACHER, CHOOSE_RANGE, ASK_CUSTOM_DATE = range(4)

# ====== –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ======
_RU_WEEKDAY_ACC = {0:"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1:"–≤—Ç–æ—Ä–Ω–∏–∫", 2:"—Å—Ä–µ–¥—É", 3:"—á–µ—Ç–≤–µ—Ä–≥", 4:"–ø—è—Ç–Ω–∏—Ü—É", 5:"—Å—É–±–±–æ—Ç—É", 6:"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}

def _tfav_load() -> dict:
    with _TFAV_LOCK:
        if not os.path.exists(_TFAV_FILE):
            return {}
        try:
            with open(_TFAV_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
                return d if isinstance(d, dict) else {}
        except Exception:
            return {}

def _tfav_save(d: dict) -> None:
    with _TFAV_LOCK:
        tmp = _TFAV_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
        os.replace(tmp, _TFAV_FILE)

def _normalize_user_entry(entry: dict) -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ 'teachers': [...]"""
    if not isinstance(entry, dict):
        return {"teachers": []}
    teachers = entry.get("teachers")
    if isinstance(teachers, list):
        out = [t for t in teachers if isinstance(t, dict) and t.get("id")]
    else:
        one = entry.get("teacher")
        out = []
        if isinstance(one, dict) and one.get("id"):
            nm = one.get("name") or one.get("title") or one.get("lecturer_title") or str(one["id"])
            out = [{"id": str(one["id"]), "name": str(nm)}]
    return {"teachers": out}

def get_fav_teachers(user_id: int) -> list[dict]:
    d = _tfav_load()
    key = str(user_id)
    entry = _normalize_user_entry(d.get(key, {}))
    d[key] = entry
    _tfav_save(d)
    return entry["teachers"]

def is_fav_teacher(user_id: int, tid: str) -> bool:
    tid = str(tid)
    return any(str(t.get("id")) == tid for t in get_fav_teachers(user_id))

def add_fav_teacher(user_id: int, tid: str, tname: str):
    d = _tfav_load()
    key = str(user_id)
    entry = _normalize_user_entry(d.get(key, {}))
    tid = str(tid)
    if not any(str(t.get("id")) == tid for t in entry["teachers"]):
        entry["teachers"].append({"id": tid, "name": str(tname or tid)})
    d[key] = entry
    _tfav_save(d)

def remove_fav_teacher(user_id: int, tid: str):
    d = _tfav_load()
    key = str(user_id)
    entry = _normalize_user_entry(d.get(key, {}))
    tid = str(tid)
    entry["teachers"] = [t for t in entry["teachers"] if str(t.get("id")) != tid]
    d[key] = entry
    _tfav_save(d)

def _weekday_acc(date_str: str) -> str:
    d = datetime.fromisoformat(date_str)  # YYYY-MM-DD
    return _RU_WEEKDAY_ACC[d.weekday()]

def _mins(t: str) -> int:
    h, m = map(int, t.split(":"))
    return h*60 + m

def _fmt_day(records: list[dict], teacher_fallback: str = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") -> str:
    if not records:
        return "–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    async def start_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' –∏–∑ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        q = update.callback_query
        if q:
            await q.answer()
        return await cmd_start(update, context)

    def build_teachers_schedule_conv():
        return ConversationHandler(
            entry_points=[
                CallbackQueryHandler(start_from_menu, pattern=r"^teachers_schedule$"),
                CommandHandler("teacher_schedule", cmd_start),
                CallbackQueryHandler(favorite_teacher_entry, pattern=r"^favorite_teacher$"),
            ],
            states={
                ASK_TEACHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_teacher_surname)],
                CHOOSE_TEACHER: [CallbackQueryHandler(on_pick_teacher, pattern=r"^pick_teacher:")],
                CHOOSE_RANGE: [CallbackQueryHandler(on_pick_range, pattern=r"^range:")],
                ASK_CUSTOM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_custom_date)],
            },
            fallbacks=[CommandHandler("teacher_schedule", cmd_start)],
            name="timetable_conv",
            persistent=False,
        )

    def _val(x):  # None -> ""
        return (x or "").strip()

    def _is_http(u: str) -> bool:
        u = (u or "").strip().lower()
        return u.startswith("http://") or u.startswith("https://")

    records = sorted(records, key=lambda x: _mins(x["beginLesson"]))
    date_str = records[0]["date"]
    teacher = (
        records[0].get("lecturer_title")
        or records[0].get("lecturer")
        or teacher_fallback
    )

    # email –∏–∑ –ª—é–±–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–Ω—è
    email = next((_val(r.get("lecturerEmail")) for r in records if _val(r.get("lecturerEmail"))), "")

    header = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {teacher} –Ω–∞ {_weekday_acc(date_str)}</b>\n({date_str}):\n\n"
    blocks = []
    for i, r in enumerate(records):
        begin = _val(r.get("beginLesson"))
        end   = _val(r.get("endLesson"))
        group = _val(r.get("group"))
        aud   = _val(r.get("auditorium"))
        kind  = _val(r.get("kindOfWork"))
        subj  = _val(r.get("discipline"))

        # –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –±–µ–∑ None –∏ –ª–∏—à–Ω–∏—Ö –¥–µ—Ñ–∏—Å–æ–≤
        right_parts = []
        if group: right_parts.append(group)
        if aud:   right_parts.append(aud)
        right = " ‚Äî ".join(right_parts)

        line1 = f"<b>{begin}‚Äì{end}.</b>" + (f" {right}." if right else "")
        kind_lc = kind.lower()
        kind_hint = "—Å–µ–º–∏–Ω–∞—Ä" if "—Å–µ–º–∏–Ω–∞—Ä" in kind_lc else ("–ª–µ–∫—Ü–∏—è" if "–ª–µ–∫—Ü" in kind_lc else "")
        line2 = f"{subj} ({'<i>'+kind_hint+'</i>'})." if kind_hint else f"{subj}."

        # üîó –°—Å—ã–ª–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏ –¥–ª—è —Å–µ–º–∏–Ω–∞—Ä–æ–≤, –∏ –¥–ª—è –ª–µ–∫—Ü–∏–π
        link_lines = []
        u1, d1 = _val(r.get("url1")), _val(r.get("url1_description"))
        u2, d2 = _val(r.get("url2")), _val(r.get("url2_description"))
        if _is_http(u1):
            link_lines.append(f"üîó <a href=\"{u1}\">{d1 or '–°—Å—ã–ª–∫–∞'}</a>")
        if _is_http(u2):
            link_lines.append(f"üîó <a href=\"{u2}\">{d2 or '–°—Å—ã–ª–∫–∞ 2'}</a>")

        block = f"{line1}\n{line2}"
        if link_lines:
            block += "\n" + "\n".join(link_lines)

        # –ø–µ—Ä–µ—Ä—ã–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã
        if i + 1 < len(records):
            next_begin = _val(records[i+1].get("beginLesson"))
            if end and next_begin:
                try:
                    gap = _mins(next_begin) - _mins(end)
                    if gap > 0:
                        block += f"\n<i>–ü–µ—Ä–µ—Ä—ã–≤ {gap} –º–∏–Ω—É—Ç.</i>"
                except Exception:
                    pass

        blocks.append(block)

    footer = f"\n\n<b>Email:</b> <a href=\"mailto:{email}\">{email}</a>" if email else ""
    return header + "\n\n".join(blocks) + footer


def _fmt_period(all_records: list[dict], teacher_name: str = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") -> str:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –ø–æ–¥—Ä—è–¥."""
    if not all_records:
        return "–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."
    by_date = defaultdict(list)
    for r in all_records:
        by_date[r["date"]].append(r)
    parts = []
    for date in sorted(by_date.keys()):
        parts.append(_fmt_day(by_date[date], teacher_fallback=teacher_name))
    return "\n\n".join(parts)

def _to_fa_date(d: datetime) -> str:
    return d.strftime("%Y.%m.%d")

def _parse_user_date(s: str) -> datetime | None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º YYYY-MM-DD –∏–ª–∏ DD.MM.YYYY."""
    s = s.strip()
    for fmt in ("%Y-%m-%d", "%d.%m.%Y"):
        try:
            return datetime.strptime(s, fmt)
        except ValueError:
            pass
    return None

# ====== –í—ã–∑–æ–≤—ã fa_api –≤ —Ñ–æ–Ω–µ ======
def _fa_search_teacher(query: str):
    fa = FaAPI()
    return fa.search_teacher(query)  # —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π

def _norm(s: str) -> str:
    s = (s or "").strip().lower()
    return s.replace("—ë", "–µ")

def _t_name(t: dict) -> str:
    return (
        (t.get("name") or t.get("full_name") or t.get("title") or t.get("lecturer_title") or "").strip()
    )

def _fa_timetable_teacher(teacher_id, start: datetime, end: datetime):
    fa = FaAPI()
    s = start.strftime("%Y.%m.%d")
    e = end.strftime("%Y.%m.%d")
    return fa.timetable_teacher(teacher_id, s, e)

# ====== –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —É–ø–∞–ª ======
def _is_source_down(exc: Exception) -> bool:
    msg = str(exc).lower()
    # —á–∞—Å—Ç—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Å–µ—Ç–µ–≤—ã—Ö/HTTP-–æ—à–∏–±–æ–∫
    needles = [
        "connection error", "failed to establish a new connection",
        "max retries", "timed out", "timeout",
        "bad gateway", "gateway timeout", "service unavailable",
        "502", "503", "504",
        "cannot connect", "connection refused", "name or service not known",
    ]
    return any(n in msg for n in needles)

# ====== –•–µ–Ω–¥–ª–µ—Ä—ã ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b> \n" "(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>):",
        parse_mode=ParseMode.HTML
    )
    return ASK_TEACHER

async def jump_in_with_teacher_from_favorites(update, context, teacher_id: str, teacher_name: str):
    """
    –í—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ).
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–∏–æ–¥–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_RANGE, —á—Ç–æ–±—ã ConversationHandler teachers_schedule –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ä–∞–±–æ—Ç—É.
    """
    context.user_data["teacher_id"] = str(teacher_id)
    context.user_data["teacher_name"] = teacher_name or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return await _ask_range(update, context, edit=False)

async def favorite_teacher_entry(update, context):
    q = update.callback_query
    await q.answer()
    fav_id = context.user_data.get("teacher_id") or (context.user_data.get("fav_teacher") or {}).get("id")
    fav_name = context.user_data.get("teacher_name") or (context.user_data.get("fav_teacher") or {}).get("name")
    if not fav_id:
        await q.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª–µ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        return ASK_TEACHER
    context.user_data["teacher_id"] = fav_id
    context.user_data["teacher_name"] = fav_name or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    return await _ask_range(update, context, edit=False)

async def _send_period_by_days(chat, teacher_id: int, start: datetime, end: datetime, teacher_name: str):
    try:
        raw = await asyncio.to_thread(_fa_timetable_teacher, teacher_id, start, end)
    except Exception as e:
        await chat.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return

    if not raw:
        ds = f"{start.strftime('%d.%m.%Y')} ‚Äî {end.strftime('%d.%m.%Y')}"
        await chat.send_message(f"–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {ds}.")
        return

    by_date = defaultdict(list)
    for r in raw:
        by_date[r["date"]].append(r)

    # –®–ª—ë–º –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    for day in sorted(by_date.keys()):
        text = _fmt_day(by_date[day], teacher_fallback=teacher_name)
        await chat.send_message(text, parse_mode=ParseMode.HTML)

def _pick_first(*vals) -> str:
    for v in vals:
        v = (v or "").strip()
        if v:
            return v
    return ""

def _teacher_fio_any(t: dict) -> str:
    # 1) –≥–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    fio = _pick_first(
        t.get("full_name"), t.get("fio_full"), t.get("display_name"),
        t.get("lecturer_title"), t.get("fio"), t.get("name"), t.get("title"),
    )
    if fio:
        return fio

    # 2) —Å–æ–±—Ä–∞—Ç—å –∏–∑ —á–∞—Å—Ç–µ–π
    last  = _pick_first(t.get("surname"), t.get("last_name"), t.get("lastname"), t.get("lastName"), t.get("family"))
    first = _pick_first(t.get("first_name"), t.get("firstname"), t.get("firstName"), t.get("name_first"), t.get("given"))
    middle= _pick_first(t.get("middle_name"), t.get("middlename"), t.get("middleName"), t.get("patronymic"), t.get("secondName"))
    parts = [p for p in (last, first, middle) if p]
    if parts:
        return " ".join(parts)

    # 3) —Ä–µ–∑–µ—Ä–≤: —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –ø–æ–ª–µ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
    cand = []
    for k, v in t.items():
        if isinstance(v, str):
            s = v.strip()
            if re.search(r"[–ê-–Ø–∞-—è–Å—ë]", s) and len(s) >= 4 and "@" not in s:
                cand.append(s)
    if cand:
        cand.sort(key=len, reverse=True)
        return cand[0]

    # 4) fallback ‚Äî id
    return f"id:{t.get('id')}"

async def on_teacher_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = (update.message.text or "").strip()
    if not query:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        return ASK_TEACHER

    await update.message.reply_text("–ò—â—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è‚Ä¶")
    try:
        teachers = await asyncio.to_thread(_fa_search_teacher, query)
    except Exception as e:
        if _is_source_down(e):
            await update.message.reply_text(
                "–ü–æ—Ö–æ–∂–µ, –∏—Å—Ç–æ—á–Ω–∏–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–µ–π—á–∞—Å <b>–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>. "
                "–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        # –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        return ConversationHandler.END

    #–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞
    if len(teachers) == 0:
        await update.message.reply_text(
            "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –µ—â—ë —Ä–∞–∑:"
        )
        return ASK_TEACHER

    # –µ—Å–ª–∏ –æ–¥–∏–Ω ‚Äî –±–µ—Ä—ë–º —Å—Ä–∞–∑—É
    if len(teachers) == 1:
        t = teachers[0]
        context.user_data["teacher_id"] = str(t["id"])
        context.user_data["teacher_name"] = t.get("name") or t.get("full_name") or t.get("title") or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        return await _ask_range(update, context)  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å ¬´–∏–∑–±—Ä–∞–Ω–Ω—ã–º¬ª

    # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ (–ø–µ—Ä–≤—ã–µ 10)
    buttons = []
    teachers_map = {}
    for t in teachers[:12]:
        fio = _teacher_fio_any(t)

        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∫–∞—Ñ–µ–¥—Ä–∞/–¥–æ–ª–∂–Ω–æ—Å—Ç—å, email) ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤
        dept = _pick_first(t.get("department"), t.get("chair"), t.get("cathedra"),
                           t.get("position"), t.get("post"), t.get("lecturer_rank"))
        email = _pick_first(t.get("email"), t.get("lecturerEmail"))

        label = fio if not (dept or email) else f"{fio} ‚Äî {', '.join(x for x in (dept, email) if x)}"
        if len(label) > 67:
            label = label[:66] + "‚Ä¶"

        buttons.append([InlineKeyboardButton(label, callback_data=f"pick_teacher:{t['id']}")])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ¬´—á–∏—Å—Ç–æ–µ¬ª –§–ò–û –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        teachers_map[str(t["id"])] = fio

    await update.message.reply_text(
        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    context.user_data["teachers_map"] = teachers_map
    return CHOOSE_TEACHER


async def on_pick_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if not q.data.startswith("pick_teacher:"):
        return ConversationHandler.END

    teacher_id = q.data.split(":", 1)[1]
    context.user_data["teacher_id"] = str(teacher_id)
    name = (context.user_data.get("teachers_map") or {}).get(teacher_id) or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    context.user_data["teacher_name"] = name
    await q.edit_message_text("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω.")
    return await _ask_range(update, context, edit=False)

async def _ask_range(update: Update, context: ContextTypes.DEFAULT_TYPE, edit: bool = True):
    teacher_id = str(context.user_data.get("teacher_id") or "")
    teacher_name = context.user_data.get("teacher_name") or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    user_id = update.effective_user.id

    rows = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="range:today"),
         InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="range:tomorrow")],
        [InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="range:this_week"),
         InlineKeyboardButton("–ù–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é", callback_data="range:next_week")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="range:pick_date"),
         InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="range:change_teacher")],
    ]

    if teacher_id:
        if is_fav_teacher(user_id, teacher_id):
            rows.append([InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"fav_teacher:remove:{teacher_id}")])
        else:
            rows.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_teacher:add:{teacher_id}")])

    rows.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="range:cancel")])
    kb = InlineKeyboardMarkup(rows)

    if edit and getattr(update, "message", None):
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    else:
        await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    return CHOOSE_RANGE

def _week_bounds(dt: datetime):
    """–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫..–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –≥–¥–µ dt ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –¥–∞—Ç–∞."""
    monday = dt - timedelta(days=dt.weekday())
    sunday = monday + timedelta(days=6)
    return monday, sunday

async def on_pick_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    data = q.data
    now = datetime.now()
    today = now.date()
    teacher_id = context.user_data.get("teacher_id")
    teacher_name = context.user_data.get("teacher_name", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")

    # --- 1) –ö–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞–Ω—å—à–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ "range:" ---
    if data.startswith("fav_teacher:add:"):
        add_tid = data.split(":", 2)[2]
        add_fav_teacher(update.effective_user.id, add_tid, teacher_name)
        # 1) –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        logging.ERROR(data)
        try:
            await q.edit_message_text(
                f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å <b>{teacher_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                parse_mode=ParseMode.HTML
            )
        except Exception:
            # 2) –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —à–ª—ë–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å <b>{teacher_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                parse_mode=ParseMode.HTML
            )
        # 3) –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π (—Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç ¬´–£–±—Ä–∞—Ç—å‚Ä¶¬ª)
        await _ask_range(update, context, edit=False)
        return CHOOSE_RANGE

    if data.startswith("fav_teacher:remove:"):
        rm_tid = data.split(":", 2)[2]
        remove_fav_teacher(update.effective_user.id, rm_tid)
        try:
            await q.edit_message_text(
                f"üö´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å <b>{teacher_name}</b> —É–±—Ä–∞–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                parse_mode=ParseMode.HTML
            )
        except Exception:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üö´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å <b>{teacher_name}</b> —É–±—Ä–∞–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                parse_mode=ParseMode.HTML
            )
        await _ask_range(update, context, edit=False)
        return CHOOSE_RANGE

    choice = data.split(":", 1)[1]
    # === —Å–º–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ===
    if choice == "change_teacher":
        # –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
        context.user_data.pop("teacher_id", None)
        context.user_data.pop("teacher_name", None)
        await q.edit_message_text(
            "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>):",
            parse_mode=ParseMode.HTML
        )
        return ASK_TEACHER

    # === —Å–µ–≥–æ–¥–Ω—è ===
    if choice == "today":
        start = end = datetime.combine(today, datetime.min.time())
        text = await _fetch_and_format(teacher_id, start, end, teacher_name)
        await q.edit_message_text(text, parse_mode=ParseMode.HTML)
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ (—á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –¥–∏–∞–ª–æ–≥–∞)
        await _ask_range(update, context, edit=False)
        return CHOOSE_RANGE

    if choice == "tomorrow":
        d = today + timedelta(days=1)
        start = end = datetime.combine(d, datetime.min.time())
        text = await _fetch_and_format(teacher_id, start, end, teacher_name)
        await q.edit_message_text(text, parse_mode=ParseMode.HTML)
        await _ask_range(update, context, edit=False)
        return CHOOSE_RANGE

    # === —ç—Ç–∞ –Ω–µ–¥–µ–ª—è ===
    if choice == "this_week":
        start, end = _week_bounds(datetime.combine(today, datetime.min.time()))
        try:
            await q.edit_message_text(
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é {start.strftime('%d.%m')}‚Äì{end.strftime('%d.%m')} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –¥–Ω—è–º‚Ä¶"
            )
        except Exception:
            pass
        await _send_period_by_days(update.effective_chat, teacher_id, start, end, teacher_name)
        # –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await _ask_range(update, context, edit=False)
        return CHOOSE_RANGE

    # === —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ===
    if choice == "next_week":
        this_mon, this_sun = _week_bounds(datetime.combine(today, datetime.min.time()))
        start = this_mon + timedelta(days=7)
        end = this_sun + timedelta(days=7)
        try:
            await q.edit_message_text(
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é {start.strftime('%d.%m')}‚Äì{end.strftime('%d.%m')} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –¥–Ω—è–º‚Ä¶"
            )
        except Exception:
            pass
        await _send_period_by_days(update.effective_chat, teacher_id, start, end, teacher_name)
        # –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await _ask_range(update, context, edit=False)
        return CHOOSE_RANGE

    # === –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É ===
    if choice == "pick_date":
        await q.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>YYYY-MM-DD</b> –∏–ª–∏ <b>DD.MM.YYYY</b>:",
            parse_mode=ParseMode.HTML
        )
        return ASK_CUSTOM_DATE

    # === –æ—Ç–º–µ–Ω–∞ ‚Äî —É–∂–µ –ø–æ—á–∏–Ω–µ–Ω–æ —Ä–∞–Ω—å—à–µ ===
    if choice == "cancel":
        # –≤–µ—Ä–Ω—É—Ç—å –≤ –ì–õ–ê–í–ù–û–ï –º–µ–Ω—é (main)
        try:
            await q.edit_message_text(
                WELCOME_TEXT_MAIN,
                reply_markup=_main_menu_kb(),
            )
        except BadRequest:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=WELCOME_TEXT_MAIN,
                reply_markup=_main_menu_kb(),
            )
        return ConversationHandler.END

    return CHOOSE_RANGE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    if getattr(update, "message", None):
        await update.message.reply_text(WELCOME_TEXT_MAIN, reply_markup=_main_menu_kb())
    else:
        await context.bot.send_message(chat_id=chat_id, text=WELCOME_TEXT_MAIN, reply_markup=_main_menu_kb())
    return ConversationHandler.END

async def on_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = (update.message.text or "").strip()
    dt = _parse_user_date(s)
    if not dt:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 2025-09-30 –∏–ª–∏ 30.09.2025. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return ASK_CUSTOM_DATE

    teacher_id = context.user_data.get("teacher_id")
    teacher_name = context.user_data.get("teacher_name", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
    start = end = dt
    text = await _fetch_and_format(teacher_id, start, end, teacher_name)
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    await _ask_range(update, context, edit=False)
    return CHOOSE_RANGE

async def _fetch_and_format(teacher_id, start: datetime, end: datetime, teacher_name: str, period: bool = False) -> str:
    try:
        raw = await asyncio.to_thread(_fa_timetable_teacher, teacher_id, start, end)
    except Exception as e:
        if _is_source_down(e):
            return ("–ü–æ—Ö–æ–∂–µ, –∏—Å—Ç–æ—á–Ω–∏–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–µ–π—á–∞—Å <b>–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>.\n"
                    "–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"

    if not raw:
        if start == end:
            ds = start.strftime("%Y-%m-%d")
            return f"–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {ds}."
        else:
            ds = f"{start.strftime('%Y-%m-%d')} ‚Äî {end.strftime('%Y-%m-%d')}"
            return f"–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {ds}."

    if period:
        return _fmt_period(raw, teacher_name=teacher_name)
    else:
        day_iso = start.strftime("%Y-%m-%d")
        day_items = [r for r in raw if r.get("date") == day_iso]
        if not day_items:
            return f"–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {day_iso}."
        return _fmt_day(day_items, teacher_fallback=teacher_name)

# ====== –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ======
def main():
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            ASK_TEACHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_teacher_surname)],
            CHOOSE_TEACHER: [CallbackQueryHandler(on_pick_teacher, pattern=r"^pick_teacher:")],
            CHOOSE_RANGE: [CallbackQueryHandler(on_pick_range, pattern=r"^range:"),
                           CallbackQueryHandler(on_pick_range, pattern=r"^fav_teacher:"),
                           ],
            ASK_CUSTOM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_custom_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", cmd_start)],
        name="timetable_conv",
        persistent=False
    )


if __name__ == "__main__":
    main()
