import re
import sys
import logging
from datetime import datetime, timedelta
from typing import Tuple, Dict, List, Any, Optional
from collections import defaultdict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters,
)
from fa_api import FaAPI  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π

# ================== –ù–ê–°–¢–†–û–ô–ö–ò / –°–û–°–¢–û–Ø–ù–ò–Ø ==================
ASK_GROUP, CHOOSE_GROUP, CHOOSE_RANGE, ASK_CUSTOM_DATE = range(4)

DATE_INPUT_RE = re.compile(r"^(\d{2})[.](\d{2})[.](\d{4})$")  # DD.MM.YYYY
DATE_FMT_API = "%Y.%m.%d"
DATE_FMT_HUMAN = "%d.%m.%Y"

fa = FaAPI()

logger = logging.getLogger("fa-bot")

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ==================
_RU_WEEKDAY_NOM = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–≤—Ç–æ—Ä–Ω–∏–∫",
    2: "—Å—Ä–µ–¥—É",
    3: "—á–µ—Ç–≤–µ—Ä–≥",
    4: "–ø—è—Ç–Ω–∏—Ü—É",
    5: "—Å—É–±–±–æ—Ç—É",
    6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}
_RU_WEEKDAY_SHORT = {0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±", 6: "–í—Å"}

def _norm_api_date_key(s: str) -> Optional[str]:
    if not isinstance(s, str):
        return None
    s = s.strip()
    m = re.match(r"^(\d{4})[.\-\/](\d{2})[.\-\/](\d{2})$", s)
    if not m:
        return None
    y, mo, d = m.groups()
    return f"{y}.{mo}.{d}"

def _to_api_date(d: datetime) -> str:
    return d.strftime(DATE_FMT_API)

def _to_human_date(d: datetime) -> str:
    return d.strftime(DATE_FMT_HUMAN)

def _week_bounds(dt: datetime) -> Tuple[datetime, datetime]:
    start = dt - timedelta(days=dt.weekday())
    end = start + timedelta(days=6)
    return start, end

def _lesson_date_api(lesson: dict) -> str:
    raw = (
        lesson.get("date") or lesson.get("day") or lesson.get("date_str")
        or lesson.get("lesson_date") or lesson.get("start") or lesson.get("datetime")
    )
    if isinstance(raw, str) and raw:
        s = raw.strip()
        if re.match(r"^\d{4}\.\d{2}\.\d{2}$", s):
            return s
        m = re.match(r"^(\d{4})[-/](\d{2})[-/](\d{2})", s)
        if m:
            y, mo, d = m.groups()
            return f"{y}.{mo}.{d}"
    return datetime.now().strftime("%Y.%m.%d")

def _time_range_of(lesson: dict) -> str:
    t = (lesson.get("time") or "").strip()
    if t:
        return t
    b = (lesson.get("begin") or lesson.get("time_from") or lesson.get("start_time") or "").strip()
    e = (lesson.get("end") or lesson.get("time_to") or lesson.get("end_time") or "").strip()
    return f"{b}-{e}" if b and e else ""

def _int_or_zero(x) -> int:
    try:
        return int(x)
    except Exception:
        return 0

def _extract_lesson_fields(lesson: dict) -> dict:
    time_range = _time_range_of(lesson)
    teacher = (
        lesson.get("teacher")
        or lesson.get("lecturer")
        or lesson.get("teacher_name")
        or lesson.get("prepod")
        or ""
    )
    if isinstance(teacher, dict):
        teacher = teacher.get("name", "")
    if isinstance(teacher, list):
        teacher = ", ".join([t.get("name", "") if isinstance(t, dict) else str(t) for t in teacher])

    room = (
        lesson.get("room")
        or lesson.get("auditorium")
        or lesson.get("auditory")
        or lesson.get("place")
        or ""
    )

    title = (
        lesson.get("title")
        or lesson.get("discipline")
        or lesson.get("subject")
        or lesson.get("lesson")
        or ""
    ).strip()

    ltype = (
        lesson.get("type")
        or lesson.get("lesson_type")
        or lesson.get("format")
        or lesson.get("kind")
        or ""
    ).strip()

    brk = (
        lesson.get("break")
        or lesson.get("break_min")
        or lesson.get("break_minutes")
        or lesson.get("pause")
        or 0
    )

    return {
        "time": time_range,
        "teacher": str(teacher).strip(),
        "room": str(room).strip(),
        "title": title,
        "ltype": ltype,
        "break": _int_or_zero(brk),
    }

def _group_by_date(data) -> Dict[str, List[dict]]:
    grouped: Dict[str, List[dict]] = {}
    if isinstance(data, dict):
        for k, v in data.items():
            k2 = _norm_api_date_key(k)
            if k2 is None:
                continue
            grouped.setdefault(k2, []).extend(list(v or []))
        return grouped
    if isinstance(data, list):
        for les in data:
            ds = _lesson_date_api(les)
            grouped.setdefault(ds, []).append(les)
    return grouped

def _filter_lessons_by_date(data, target_api_date: str):
    if isinstance(data, dict):
        for k, v in data.items():
            k2 = _norm_api_date_key(k)
            if k2 == target_api_date:
                return list(v or [])
        return []
    if isinstance(data, list):
        return [les for les in data if _lesson_date_api(les) == target_api_date]
    return []

def _fmt_day(date_str: str, lessons: List[Dict[str, Any]], group_name_for_header: Optional[str] = None) -> str:
    d = datetime.strptime(date_str, DATE_FMT_API)
    dow_nom = _RU_WEEKDAY_NOM[d.weekday()]
    header_title = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name_for_header or ''}".strip()
    header = f"<b>{header_title} –Ω–∞ {dow_nom} ({d.strftime('%Y-%m-%d')}):</b>"

    if not lessons:
        return f"{header}\n\n–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"

    norm = [_extract_lesson_fields(x) for x in lessons]
    slots: Dict[str, List[dict]] = {}
    for f in norm:
        slots.setdefault(f["time"], []).append(f)

    def _time_key(t: str) -> int:
        m = re.match(r"^(\d{2}):(\d{2})", t or "")
        return (int(m.group(1)) * 60 + int(m.group(2))) if m else 10**9

    lines: List[str] = [header, ""]
    first_slot = True
    for t in sorted(slots.keys(), key=_time_key):
        slot = slots[t]
        if not first_slot:
            lines.append("")
        first_slot = False

        for f in slot:
            first_line = ""
            if f["time"]:
                first_line += f"{f['time']}."
            if f["teacher"]:
                first_line += f" {f['teacher']}"
            if f["room"]:
                first_line += f" ‚Äî {f['room']}."
            lines.append(first_line.strip())

            second_line = f["title"]
            if f["ltype"]:
                second_line += f" ({f['ltype']})"
            if second_line and not second_line.endswith("."):
                second_line += "."
            lines.append(second_line.strip())

        brk = max((f["break"] or 0) for f in slot)
        if brk > 0:
            lines.append(f"–ü–µ—Ä–µ—Ä—ã–≤ {brk} –º–∏–Ω—É—Ç.")

    return "\n".join(lines).rstrip()

def _group_id(g: Dict[str, Any]):
    return g.get("id") or g.get("group_id") or g.get("gid") or g.get("uuid") or g.get("_id")

def _group_name(g: Dict[str, Any]) -> str:
    return (
        g.get("name")
        or g.get("title")
        or g.get("label")
        or g.get("group")
        or g.get("group_name")
        or g.get("fullname")
        or g.get("display")
        or str(g.get("id") or g)
    )

def _kb_ranges() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="rng:today"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="rng:tomorrow"),
        ],
        [
            InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="rng:this_week"),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="rng:next_week"),
        ],
        [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="rng:pick_date"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="rng:change_group"),
        ],
        [
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="rng:cancel"),
        ],
    ])

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # entry-point –∏–∑ –º–µ–Ω—é: –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ callback_query, —Ç–∞–∫ –∏ /schedule
    if update.callback_query:
        await update.callback_query.answer()
        send = update.callback_query.edit_message_text
    else:
        send = update.message.reply_text

    await send(
        "üëã –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò19-6):",
        parse_mode=ParseMode.HTML,
    )
    context.user_data.clear()
    return ASK_GROUP

async def ask_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query_text = (update.message.text or "").strip()
    if not query_text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP
    try:
        groups = fa.search_group(query_text)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP

    if not groups:
        await update.message.reply_text("–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫—É—é –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP

    query_l = query_text.lower()
    exact = [g for g in groups if _group_name(g).strip().lower() == query_l]
    chosen = exact[0] if len(exact) == 1 else (groups[0] if len(groups) == 1 else None)
    if chosen:
        context.user_data["group"] = chosen
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>{_group_name(chosen)}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            parse_mode=ParseMode.HTML,
            reply_markup=_kb_ranges(),
        )
        return CHOOSE_RANGE

    only_groups = [g for g in groups if g.get("type") == "group"] or groups
    only_groups = only_groups[:10]

    buttons = [[InlineKeyboardButton(_group_name(g), callback_data=f"grp:{_group_id(g)}")] for g in only_groups]
    buttons.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="grp:retry")])

    await update.message.reply_text(
        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    context.user_data["group_candidates"] = {str(_group_id(g)): g for g in only_groups}
    return CHOOSE_GROUP

async def choose_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "grp:retry":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –µ—â—ë —Ä–∞–∑:")
        return ASK_GROUP
    if not data.startswith("grp:"):
        return CHOOSE_GROUP

    gid = data.split(":", 1)[1]
    candidates = context.user_data.get("group_candidates") or {}
    chosen = candidates.get(gid)
    if not chosen:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return ASK_GROUP

    context.user_data["group"] = chosen
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>{_group_name(chosen)}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_ranges(),
    )
    return CHOOSE_RANGE

async def choose_range(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "rng:cancel":
        await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    if action == "rng:change_group":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        return ASK_GROUP

    group = context.user_data.get("group")
    if not group:
        await query.edit_message_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        return ASK_GROUP

    gid = _group_id(group)
    gname = _group_name(group)
    if not gid:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≥—Ä—É–ø–ø—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return ASK_GROUP

    today = datetime.now()

    if action == "rng:today":
        d = today
        ds = _to_api_date(d)
        try:
            chat_id = update.effective_chat.id
            raw = fa.timetable_group(gid)
            lessons = _filter_lessons_by_date(raw, ds)
            text = _fmt_day(ds, lessons, gname)
            await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML, reply_markup=_kb_ranges())
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable today: %s", e)
            await query.edit_message_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=_kb_ranges())
        return CHOOSE_RANGE

    if action == "rng:tomorrow":
        d = today + timedelta(days=1)
        ds = _to_api_date(d)
        try:
            chat_id = update.effective_chat.id
            start = _to_api_date(today)
            end = _to_api_date(today + timedelta(days=1))
            raw = fa.timetable_group(gid, start, end)
            grouped = _group_by_date(raw)
            lessons = grouped.get(ds, [])
            text = _fmt_day(ds, lessons, gname)
            await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML, reply_markup=_kb_ranges())
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable tomorrow: %s", e)
            await query.edit_message_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=_kb_ranges())
        return CHOOSE_RANGE

    if action == "rng:this_week":
        ws, we = _week_bounds(today)
        ds, de = _to_api_date(ws), _to_api_date(we)
        grouped = {}
        try:
            raw = fa.timetable_group(gid, ds, de)
            grouped = _group_by_date(raw)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable this_week: %s", e)
            await query.edit_message_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=_kb_ranges())
            return CHOOSE_RANGE

        await query.edit_message_text(
            f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {gname} –Ω–∞ –Ω–µ–¥–µ–ª—é ({_to_human_date(ws)}‚Äì{_to_human_date(we)})</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –¥–Ω—è–º –Ω–∏–∂–µ ‚¨áÔ∏è",
            parse_mode=ParseMode.HTML,
        )

        chat_id = update.effective_chat.id
        sent_any = False
        for date_str in sorted(grouped.keys()):
            d = datetime.strptime(date_str, DATE_FMT_API)
            if ws <= d <= we:
                text_day = _fmt_day(date_str, grouped.get(date_str, []), gname)
                await context.bot.send_message(chat_id=chat_id, text=text_day, parse_mode=ParseMode.HTML)
                sent_any = True
        if not sent_any:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")
        await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=_kb_ranges())
        return CHOOSE_RANGE

    if action == "rng:next_week":
        ws, we = _week_bounds(today + timedelta(days=7))
        ds, de = _to_api_date(ws), _to_api_date(we)
        grouped = {}
        try:
            raw = fa.timetable_group(gid, ds, de)
            grouped = _group_by_date(raw)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable next_week: %s", e)
            await query.edit_message_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=_kb_ranges())
            return CHOOSE_RANGE

        await query.edit_message_text(
            f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {gname} –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é ({_to_human_date(ws)}‚Äì{_to_human_date(we)})</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –¥–Ω—è–º –Ω–∏–∂–µ ‚¨áÔ∏è",
            parse_mode=ParseMode.HTML,
        )

        chat_id = update.effective_chat.id
        sent_any = False
        for date_str in sorted(grouped.keys()):
            d = datetime.strptime(date_str, DATE_FMT_API)
            if ws <= d <= we:
                text_day = _fmt_day(date_str, grouped.get(date_str, []), gname)
                await context.bot.send_message(chat_id=chat_id, text=text_day, parse_mode=ParseMode.HTML)
                sent_any = True
        if not sent_any:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.")
        await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=_kb_ranges())
        return CHOOSE_RANGE

    if action == "rng:pick_date":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>:", parse_mode=ParseMode.HTML)
        return ASK_CUSTOM_DATE

    return CHOOSE_RANGE

async def ask_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    m = DATE_INPUT_RE.match((update.message.text or "").strip())
    if not m:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì")
        return ASK_CUSTOM_DATE

    dd, mm, yyyy = map(int, m.groups())
    try:
        d = datetime(year=yyyy, month=mm, day=dd)
    except ValueError:
        await update.message.reply_text("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_CUSTOM_DATE

    group = context.user_data.get("group")
    if not group:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É: /start")
        return ConversationHandler.END

    gid = _group_id(group)
    gname = _group_name(group)
    if not gid:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≥—Ä—É–ø–ø—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP

    ds = _to_api_date(d)
    try:
        raw = fa.timetable_group(gid)
        lessons = _filter_lessons_by_date(raw, ds)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ timetable by date: %s", e)
        await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return CHOOSE_RANGE

    text = _fmt_day(ds, lessons, gname)
    await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=_kb_ranges())
    return CHOOSE_RANGE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# ================== –°–ë–û–†–ö–ê CONVERSATION ==================
def build_schedule_groups_conv(entry_points):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç ConversationHandler –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.
    entry_points: —Å–ø–∏—Å–æ–∫ entry-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ —Å pattern='^schedule_groups$').
    """
    return ConversationHandler(
        entry_points=entry_points,
        states={
            ASK_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_group)],
            CHOOSE_GROUP: [CallbackQueryHandler(choose_group, pattern=r"^grp:")],
            CHOOSE_RANGE: [CallbackQueryHandler(choose_range, pattern=r"^rng:")],
            ASK_CUSTOM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_custom_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="schedule_conv",
        persistent=False,
        per_message=False,
    )
