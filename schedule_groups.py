import re
import sys
import logging
import os, json, threading
_FAV_FILE = os.path.join(os.path.dirname(__file__), "favorites.json")
_FAV_LOCK = threading.Lock()
from datetime import datetime, timedelta
from typing import Tuple, Dict, List, Any, Optional
from collections import defaultdict
from homework import send_homework_for_date
##PINGUIN
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters,
)
from fa_api import FaAPI  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π

_RINGS_DEFAULT = ["08:30","10:15","12:00","13:50","15:35","17:20","19:05"]


WELCOME_TEXT_MAIN = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö –∏ –¥–∑, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø.\n"
    "–ú—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–µ—Ç–∞ —Ç–µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ: @question_finashkadzbot\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)

def _main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]])

# ================== –ù–ê–°–¢–†–û–ô–ö–ò / –°–û–°–¢–û–Ø–ù–ò–Ø ==================
ASK_GROUP, CHOOSE_GROUP, CHOOSE_RANGE, ASK_CUSTOM_DATE = range(4)

DATE_INPUT_RE = re.compile(r"^(\d{2})[.](\d{2})[.](\d{4})$")  # DD.MM.YYYY
DATE_FMT_API = "%Y.%m.%d"
DATE_FMT_HUMAN = "%d.%m.%Y"

fa = FaAPI()

logger = logging.getLogger("fa-bot")

_URL_RE = re.compile(r"(https?://[^\s<>()]+)", re.IGNORECASE)

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ==================
_RU_WEEKDAY_NOM = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–≤—Ç–æ—Ä–Ω–∏–∫",
    2: "—Å—Ä–µ–¥—É",
    3: "—á–µ—Ç–≤–µ—Ä–≥",
    4: "–ø—è—Ç–Ω–∏—Ü—É",
    5: "—Å—É–±–±–æ—Ç—É",
    6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}
_RU_WEEKDAY_SHORT = {0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±", 6: "–í—Å"}

def _norm_api_date_key(s: str) -> Optional[str]:
    if not isinstance(s, str):
        return None
    s = s.strip()
    m = re.match(r"^(\d{4})[.\-\/](\d{2})[.\-\/](\d{2})$", s)
    if not m:
        return None
    y, mo, d = m.groups()
    return f"{y}.{mo}.{d}"

def _to_api_date(d: datetime) -> str:
    return d.strftime(DATE_FMT_API)

def _to_human_date(d: datetime) -> str:
    return d.strftime(DATE_FMT_HUMAN)

def _week_bounds(dt: datetime) -> Tuple[datetime, datetime]:
    start = dt - timedelta(days=dt.weekday())
    end = start + timedelta(days=6)
    return start, end

def _fav_load():
    with _FAV_LOCK:
        if not os.path.exists(_FAV_FILE):
            return {}
        try:
            with open(_FAV_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
                return d if isinstance(d, dict) else {}
        except Exception:
            return {}

def _fav_save(d):
    with _FAV_LOCK:
        tmp = _FAV_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
        os.replace(tmp, _FAV_FILE)

def _normalize_legacy_user_entry(entry):
    """
    –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—á–∏–µ —Ä–∞–∑–¥–µ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, teachers).
    """
    if not isinstance(entry, dict):
        return {"groups": []}

    out = dict(entry)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å

    groups = entry.get("groups")
    single = entry.get("group")
    if isinstance(groups, list):
        out["groups"] = [g for g in groups if isinstance(g, dict) and g.get("id")]
    elif isinstance(single, dict) and single.get("id"):
        out["groups"] = [{"id": str(single["id"]),
                          "name": str(single.get("name") or single.get("title") or single.get("group") or single["id"])}]
        out.pop("group", None)
    else:
        out.setdefault("groups", [])

    return out

def get_fav_groups(user_id: int):
    d = _fav_load()
    key = str(user_id)
    old_entry = d.get(key, {})
    new_entry = _normalize_legacy_user_entry(old_entry)
    if new_entry != old_entry:
        d[key] = new_entry
        _fav_save(d)
    return new_entry.get("groups", [])

def is_fav_group(user_id: int, gid: str) -> bool:
    gid = str(gid)
    return any(str(g.get("id")) == gid for g in get_fav_groups(user_id))

def add_fav_group(user_id: int, gid: str, gname: str):
    d = _fav_load()
    key = str(user_id)
    entry = _normalize_legacy_user_entry(d.get(key, {}))
    # —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ id
    gid = str(gid)
    if not any(str(g.get("id")) == gid for g in entry["groups"]):
        entry["groups"].append({"id": gid, "name": str(gname)})
    d[key] = entry
    _fav_save(d)

def remove_fav_group(user_id: int, gid: str):
    d = _fav_load()
    key = str(user_id)
    entry = _normalize_legacy_user_entry(d.get(key, {}))
    gid = str(gid)
    entry["groups"] = [g for g in entry["groups"] if str(g.get("id")) != gid]
    d[key] = entry
    _fav_save(d)

def _lesson_date_api(lesson: dict) -> str:
    raw = (
        lesson.get("date") or lesson.get("day") or lesson.get("date_str")
        or lesson.get("lesson_date") or lesson.get("start") or lesson.get("datetime")
    )
    if isinstance(raw, str) and raw:
        s = raw.strip()
        if re.match(r"^\d{4}\.\d{2}\.\d{2}$", s):
            return s
        m = re.match(r"^(\d{4})[-/](\d{2})[-/](\d{2})", s)
        if m:
            y, mo, d = m.groups()
            return f"{y}.{mo}.{d}"
    return datetime.now().strftime("%Y.%m.%d")

def _first_str(*vals) -> str:
    """–í–µ—Ä–Ω—ë—Ç –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π str –∏–∑ –Ω–∞–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π."""
    for v in vals:
        if isinstance(v, str) and v.strip():
            return v.strip()
    return ""

def _get_time_begin(lesson: dict) -> str:
    # —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∞–ª–∏–∞—Å—ã ¬´–Ω–∞—á–∞–ª–∞¬ª
    return _first_str(
        lesson.get("begin"),
        lesson.get("begin_time"),
        lesson.get("time_from"),
        lesson.get("start_time"),
        lesson.get("start"),
        lesson.get("timeStart"),
        lesson.get("startTime"),
        lesson.get("beginLesson"),
        lesson.get("time_begin"),
    )

# ===== –ù—É–º–µ—Ä–∞—Ü–∏—è –ø–∞—Ä –ø–æ –∑–≤–æ–Ω–∫–∞–º (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ rings.json) =====
import os, json

RING_STARTS = ["08:30", "10:10", "11:50", "14:00", "15:40", "17:25", "18:55", "20:30"] # –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞

def _num_emoji(n: int) -> str:
    """1 -> 1Ô∏è‚É£, 10 -> üîü, 11 -> 1Ô∏è‚É£1Ô∏è‚É£ –∏ —Ç.–¥."""
    key = {0:"0Ô∏è‚É£",1:"1Ô∏è‚É£",2:"2Ô∏è‚É£",3:"3Ô∏è‚É£",4:"4Ô∏è‚É£",5:"5Ô∏è‚É£",6:"6Ô∏è‚É£",7:"7Ô∏è‚É£",8:"8Ô∏è‚É£"}
    if n in key:
        return key[n]
    return "".join(key[int(ch)] if ch.isdigit() else ch for ch in str(n))

def _slot_no_by_time_range(time_range: str) -> Optional[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–±–ª–∏–∂–∞–π—à–∏–π –∫ RING_STARTS)."""
    start_min, _ = _range_to_bounds(time_range)
    if start_min is None:
        return None
    ring_mins = [_hhmm_to_min(x) for x in RING_STARTS if _hhmm_to_min(x) is not None]
    if not ring_mins:
        return None
    idx = min(range(len(ring_mins)), key=lambda k: abs(ring_mins[k] - start_min))
    return idx + 1

def _load_rings_starts() -> list[str]:
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª rings.json (–º–∞—Å—Å–∏–≤ 'HH:MM'), –µ—Å–ª–∏ –µ—Å—Ç—å. –ò–Ω–∞—á–µ ‚Äî –¥–µ—Ñ–æ–ª—Ç."""
    rings_path = os.path.join(os.path.dirname(__file__), "rings.json")
    try:
        if os.path.exists(rings_path):
            with open(rings_path, "r", encoding="utf-8") as f:
                arr = json.load(f)
            if isinstance(arr, list) and all(isinstance(x, str) for x in arr):
                return arr
    except Exception:
        pass
    return list(_RINGS_DEFAULT)

_RINGS_STARTS = _load_rings_starts()

def _pair_no_for_time_range(time_range: str, tolerance_min: int = 25) -> Optional[int]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –ø–æ –Ω–∞—á–∞–ª—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ 'HH:MM-HH:MM',
    —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—è —Å –Ω–∞—á–∞–ª–æ–º –ø–∞—Ä –≤ _RINGS_STARTS (—Å –¥–æ–ø—É—Å–∫–æ–º).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1..N –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å.
    """
    start_min, _ = _range_to_bounds(time_range)
    if start_min is None:
        return None

    best_idx = None
    best_diff = 10**9
    for idx, hhmm in enumerate(_RINGS_STARTS):
        rm = _hhmm_to_min(hhmm)
        if rm is None:
            continue
        diff = abs(start_min - rm)
        if diff < best_diff:
            best_diff = diff
            best_idx = idx

    if best_idx is not None and best_diff <= tolerance_min:
        return best_idx + 1  # –ø–∞—Ä—ã –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å 1
    return None

def _get_time_end(lesson: dict) -> str:
    # —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∞–ª–∏–∞—Å—ã ¬´–∫–æ–Ω—Ü–∞¬ª
    return _first_str(
        lesson.get("end"),
        lesson.get("end_time"),
        lesson.get("time_to"),
        lesson.get("finish"),
        lesson.get("timeEnd"),
        lesson.get("endTime"),
        lesson.get("endLesson"),
        lesson.get("time_end"),
    )

def _time_range_of(lesson: dict) -> str:
    """–í–µ—Ä–Ω—ë—Ç 'HH:MM-HH:MM' –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π."""
    # –∏–Ω–æ–≥–¥–∞ API –æ—Ç–¥–∞—ë—Ç —Å—Ä–∞–∑—É –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–¥–Ω–∏–º –ø–æ–ª–µ–º
    t = _first_str(
        lesson.get("time"),
        lesson.get("lesson_time"),
        lesson.get("lessonTime"),
        lesson.get("para"),          # —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö API ¬´–ø–∞—Ä–∞¬ª —É–∂–µ —Å—Ç—Ä–æ–∫–æ–π "08:30-10:00"
    )
    if t:
        return t

    b = _get_time_begin(lesson)
    e = _get_time_end(lesson)
    return f"{b}-{e}" if b and e else ""

# ------- –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤

def _join_fio(last: str, first: str, middle: str) -> str:
    parts = [p.strip() for p in (last, first, middle) if isinstance(p, str) and p.strip()]
    return " ".join(parts)

# ¬´–§–∞–º–∏–ª–∏—è –ò. –û.¬ª / ¬´–§–∞–º–∏–ª–∏—è –ò.–û.¬ª
_INITIALS_RE = re.compile(r"^[–ê-–ØA-Z–Å][–∞-—èa-z—ë\-]+(?:\s+[–ê-–ØA-Z]\.\s*[–ê-–ØA-Z]\.)$")

def _fio_from_dict(t: dict) -> str:
    # –Ø–≤–Ω—ã–µ ¬´–ø–æ–ª–Ω—ã–µ¬ª –ø–æ–ª—è
    full = (
        t.get("teacher_full") or t.get("full_name") or t.get("fio_full")
        or t.get("fioFull") or t.get("name_full") or t.get("display_name")
    )
    if isinstance(full, str) and full.strip():
        return full.strip()

    # –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏ snake_case, –∏ camelCase
    last  = t.get("last_name")   or t.get("lastName")   or t.get("surname") or t.get("family") or t.get("family_name")
    first = t.get("first_name")  or t.get("firstName")  or t.get("given_name") or t.get("name")
    mid   = t.get("middle_name") or t.get("middleName") or t.get("patronymic") or t.get("second_name") or t.get("secondName")

    fio = _join_fio(last or "", first or "", mid or "")
    if fio:
        return fio

    # –ò–Ω–æ–≥–¥–∞ –∫–ª–∞–¥—É—Ç ¬´fio¬ª, –Ω–æ —Ç–∞–º –±—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ ‚Äî –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
    fio_any = t.get("fio") or t.get("teacher") or t.get("lecturer") or t.get("title") or t.get("short_name")
    if isinstance(fio_any, str) and fio_any.strip() and not _INITIALS_RE.match(fio_any.strip()):
        return fio_any.strip()

    # –§–æ–ª–±—ç–∫ ‚Äî —á—Ç–æ –µ—Å—Ç—å
    return (fio_any or "").strip()


def _hhmm_to_min(s: str) -> Optional[int]:
    m = re.match(r"^\s*(\d{1,2}):(\d{2})", s or "")
    if not m:
        return None
    return int(m.group(1)) * 60 + int(m.group(2))

def _get_teacher_full(lesson: dict) -> str:
    # 0) FA-—Å–ø–∏—Å–æ–∫ —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º
    if isinstance(lesson.get("listOfLecturers"), list):
        out = []
        for t in lesson["listOfLecturers"]:
            if isinstance(t, dict):
                # –í FA –ø–æ–ª–Ω–æ–µ: lecturer_title
                fio = t.get("lecturer_title") or t.get("full_name") or t.get("fio")
                if not fio:
                    fio = _join_fio(t.get("surname") or t.get("last_name") or "",
                                    t.get("name") or t.get("first_name") or "",
                                    t.get("patronymic") or t.get("middle_name") or "")
                if fio:
                    out.append(fio.strip())
            else:
                out.append(str(t).strip())
        if out:
            return "; ".join(out)

    # 1) –º–∞—Å—Å–∏–≤/—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö API
    for key in ("teachers", "lecturers"):
        items = lesson.get(key)
        if isinstance(items, list) and items:
            out = []
            for t in items:
                if isinstance(t, dict):
                    fio = (
                        t.get("lecturer_title") or t.get("teacher_full") or t.get("full_name") or t.get("fio") or
                        _join_fio(t.get("surname") or t.get("last_name") or "",
                                  t.get("name") or t.get("first_name") or "",
                                  t.get("patronymic") or t.get("middle_name") or "")
                    )
                else:
                    fio = str(t)
                if fio:
                    out.append(fio.strip())
            if out:
                return "; ".join(out)

    # 2) –µ–¥–∏–Ω–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    for key in ("teacher", "lecturer", "teacher_info"):
        t = lesson.get(key)
        if isinstance(t, dict):
            return (
                t.get("lecturer_title") or t.get("teacher_full") or t.get("full_name") or t.get("fio") or
                _join_fio(t.get("surname") or t.get("last_name") or "",
                          t.get("name") or t.get("first_name") or "",
                          t.get("patronymic") or t.get("middle_name") or "")
            ).strip()

    # 3) —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
    return (
        lesson.get("lecturer_title") or
        lesson.get("teacher_full") or lesson.get("teacherFio") or lesson.get("teacher_fio") or
        lesson.get("full_name") or lesson.get("fio") or
        lesson.get("lecturer") or lesson.get("teacher") or
        lesson.get("teacher_name") or lesson.get("prepod") or ""
    ).strip()

def _normalize_ltype(s: str) -> str:
    if not isinstance(s, str):
        return ""
    x = s.strip().lower()
    if not x:
        return ""
    # —Å–º–æ—Ç—Ä–∏–º –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å "–õ–µ–∫—Ü–∏–∏", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ (—Å–µ–º–∏–Ω–∞—Ä—Å–∫–∏–µ) –∑–∞–Ω—è—Ç–∏—è"
    if "–ª–µ–∫—Ü–∏" in x:         # –ª–µ–∫—Ü–∏—è/–ª–µ–∫—Ü–∏–∏
        return "–ª–µ–∫—Ü–∏—è"
    if "—Å–µ–º–∏–Ω–∞—Ä" in x or "—Å–µ–º–∏–Ω–∞—Ä—Å–∫" in x:
        return "—Å–µ–º–∏–Ω–∞—Ä"
    if "–ø—Ä–∞–∫—Ç–∏—á–µ—Å" in x:
        return "–ø—Ä–∞–∫—Ç–∏–∫–∞"
    if "–ª–∞–±" in x:
        return "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"
    if "–∫–æ–ª–ª–æ–∫–≤–∏—É–º" in x:
        return "–∫–æ–ª–ª–æ–∫–≤–∏—É–º"
    if "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü" in x:
        return "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    if "–∑–∞—á–µ—Ç" in x or "–∑–∞—á—ë—Ç" in x:
        return "–∑–∞—á—ë—Ç"
    if "—ç–∫–∑–∞–º–µ–Ω" in x:
        return "—ç–∫–∑–∞–º–µ–Ω"
    return s.strip()


_URL_RE = re.compile(r"(https?://[^\s<>\)\]]+)", re.IGNORECASE)

def _find_online_link(lesson: dict) -> str:
    # –ø—Ä—è–º—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö API
    candidates = [
        lesson.get("link"), lesson.get("url"), lesson.get("webinar"),
        lesson.get("web_url"), lesson.get("online_link"), lesson.get("conference_url"),
        lesson.get("zoom"), lesson.get("teams"), lesson.get("meet"), lesson.get("bbb"),
        lesson.get("lms_url"), lesson.get("stream_url"), lesson.get("broadcast"),
        lesson.get("video_link"),
        # ‚¨áÔ∏è FA: url1/url2
        lesson.get("url1"), lesson.get("url2"),
    ]

    # —á–∞—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è, –≥–¥–µ —Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç ‚Äú–ø—Ä—è—Ç–∞—Ç—å—Å—è‚Äù
    text_fields = [
        "comment", "note", "notes", "desc", "description", "details", "info",
        "message", "commentary", "extra", "remark", "title", "subject",
        # ‚¨áÔ∏è FA: –ø–æ–¥–ø–∏—Å–∏ –∫ —Å—Å—ã–ª–∫–∞–º
        "url1_description", "url2_description",
    ]
    for k in text_fields:
        val = lesson.get(k)
        if isinstance(val, str):
            m = _URL_RE.search(val)
            if m:
                candidates.append(m.group(1))

    # –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    for k in ("online", "conference", "webinar", "meeting", "stream"):
        obj = lesson.get(k)
        if isinstance(obj, dict):
            candidates.extend([obj.get("url"), obj.get("link")])
            for tv in text_fields:
                val = obj.get(tv)
                if isinstance(val, str):
                    m = _URL_RE.search(val)
                    if m:
                        candidates.append(m.group(1))

    # –≤–ª–æ–∂–µ–Ω–∏—è-—Å–ø–∏—Å–∫–∏
    for k in ("attachments", "files", "links"):
        arr = lesson.get(k)
        if isinstance(arr, list):
            for it in arr:
                if isinstance(it, dict):
                    u = it.get("url") or it.get("link")
                    if isinstance(u, str):
                        candidates.append(u)

    # –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π http(s)
    for c in candidates:
        if isinstance(c, str):
            url = c.strip().strip(").,]}>")
            if url.lower().startswith(("http://", "https://")):
                return url
    return ""

def _is_online_lesson(lesson: dict) -> bool:
    for k in ("online", "is_online", "remote", "distance", "distance_learning", "distant", "online_lesson"):
        v = lesson.get(k)
        if isinstance(v, bool) and v:
            return True
        if isinstance(v, str) and v.strip().lower() in ("1", "true", "yes", "–¥–∞"):
            return True

    room = (lesson.get("room") or lesson.get("auditorium") or lesson.get("place") or "") or ""
    building = (lesson.get("building") or "") or ""
    room_l = str(room).lower()
    building_l = str(building).lower()

    # –∫–ª—é—á–µ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    if any(x in room_l for x in ("–æ–Ω–ª–∞–π–Ω", "–¥–∏—Å—Ç–∞–Ω", "zoom", "teams", "webinar", "–≤–∫—Å", "bbb", "meet", "–≤.–∑.", "–¥.–∞.")):
        return True
    if "–≤–∏—Ä—Ç—É–∞–ª—å" in building_l:  # "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ"
        return True

    if _find_online_link(lesson):
        return True

    return False

def _range_to_bounds(time_range: str) -> Tuple[Optional[int], Optional[int]]:
    """–í–µ—Ä–Ω—ë—Ç (start_min, end_min) –¥–ª—è 'HH:MM-HH:MM'."""
    if not isinstance(time_range, str) or "-" not in time_range:
        return None, None
    left, right = time_range.split("-", 1)
    return _hhmm_to_min(left), _hhmm_to_min(right)

def _int_or_zero(x) -> int:
    try:
        return int(x)
    except Exception:
        return 0

def _extract_lesson_fields(lesson: dict) -> dict:
    time_range = _time_range_of(lesson)
    teacher = _get_teacher_full(lesson)  # –ø–æ–ª–Ω–æ–µ –§–ò–û

    room = (
        lesson.get("room")
        or lesson.get("auditorium")
        or lesson.get("auditory")
        or lesson.get("place")
        or ""
    )

    title = (
        lesson.get("title")
        or lesson.get("discipline")
        or lesson.get("subject")
        or lesson.get("lesson")
        or ""
    ).strip()

    ltype_raw = (
            lesson.get("kindOfWork")  # ‚¨ÖÔ∏è FA
            or lesson.get("type")
            or lesson.get("lesson_type")
            or lesson.get("format")
            or lesson.get("kind")
            or ""
    )
    ltype = _normalize_ltype(ltype_raw)

    brk = (
        lesson.get("break")
        or lesson.get("break_min")
        or lesson.get("break_minutes")
        or lesson.get("pause")
        or 0
    )

    link = _find_online_link(lesson)
    is_online = _is_online_lesson(lesson)

    return {
        "time": time_range,
        "teacher": str(teacher).strip(),
        "room": str(room).strip(),
        "title": title,
        "ltype": ltype,
        "break": _int_or_zero(brk),
        "link": link,
        "is_online": is_online,
    }

def _group_by_date(data) -> Dict[str, List[dict]]:
    grouped: Dict[str, List[dict]] = {}
    if isinstance(data, dict):
        for k, v in data.items():
            k2 = _norm_api_date_key(k)
            if k2 is None:
                continue
            grouped.setdefault(k2, []).extend(list(v or []))
        return grouped
    if isinstance(data, list):
        for les in data:
            ds = _lesson_date_api(les)
            grouped.setdefault(ds, []).append(les)
    return grouped

def _filter_lessons_by_date(data, target_api_date: str):
    if isinstance(data, dict):
        for k, v in data.items():
            k2 = _norm_api_date_key(k)
            if k2 == target_api_date:
                return list(v or [])
        return []
    if isinstance(data, list):
        return [les for les in data if _lesson_date_api(les) == target_api_date]
    return []

def _fmt_day(date_str: str, lessons: List[Dict[str, Any]], group_name_for_header: Optional[str] = None) -> str:
    d = datetime.strptime(date_str, DATE_FMT_API)
    dow_nom = _RU_WEEKDAY_NOM[d.weekday()]

    gtitle = (group_name_for_header or "").strip()
    header = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b>{gtitle}</b> –Ω–∞ {dow_nom} ({d.strftime('%Y-%m-%d')}):"

    if not lessons:
        return f"{header}\n\n–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"

    norm = []
    for x in lessons:
        f = _extract_lesson_fields(x)
        if not f["time"]:
            f["time"] = _time_range_of(x)
        norm.append(f)

    slots: Dict[str, List[dict]] = {}
    for f in norm:
        slots.setdefault(f["time"], []).append(f)

    def _range_to_bounds(t: str):
        m = re.match(r"^(\d{2}):(\d{2})-(\d{2}):(\d{2})$", t or "")
        if not m:
            return None, None
        h1, m1, h2, m2 = map(int, m.groups())
        return h1 * 60 + m1, h2 * 60 + m2

    def _time_key(t: str) -> int:
        s, _ = _range_to_bounds(t)
        return s if s is not None else 10**9

    slot_keys = sorted(slots.keys(), key=_time_key)

    lines: List[str] = [header, ""]

    for i, t in enumerate(slot_keys):
        slot = slots[t]
        slot_no = _slot_no_by_time_range(t)
        slot_emo = _num_emoji(slot_no) if slot_no else "‚Ä¢"

        if i > 0:
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–ª–æ—Ç–∞–º–∏

        for f in slot:
            first_line_parts = []
            if f["time"]:
                pno = _pair_no_for_time_range(f["time"])
                if pno is not None:
                    first_line_parts.append(f"{slot_emo} <b>{f['time']}</b>.")
                else:
                    first_line_parts.append(f"{slot_emo} <b>{f['time']}</b>.")
            if f["teacher"]:
                # —É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: —Ç—ç–≥ code
                first_line_parts.append(f"<code>{f['teacher']}</code>")
            if f["room"]:
                first_line_parts.append(f"‚Äî {f['room']}.")

            # –ø–æ–º–µ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω/—Å—Å—ã–ª–∫–∞
            if f.get("link"):
                first_line_parts.append(f'(<a href="{f["link"]}">–æ–Ω–ª–∞–π–Ω</a>)')
            elif f.get("is_online"):
                first_line_parts.append("(–æ–Ω–ª–∞–π–Ω)")

            first_line = " ".join(first_line_parts).strip()
            if not first_line.endswith(".") and not first_line.endswith(")"):
                first_line += "."
            lines.append(first_line)

            # 2-—è —Å—Ç—Ä–æ–∫–∞: "–ü—Ä–µ–¥–º–µ—Ç (<i>—Ç–∏–ø</i>)."
            second_line = f["title"].strip()
            if f["ltype"]:
                second_line += f" ({f['ltype']})"
            if second_line and not second_line.endswith("."):
                second_line += "."
            lines.append(second_line)

        # –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É —Å–ª–æ—Ç–∞–º–∏
        cur_start, cur_end = _range_to_bounds(t)
        if cur_end is None:
            cur_end = max((_range_to_bounds(f["time"])[1] or 0) for f in slot)
        if i + 1 < len(slot_keys):
            next_start, _ = _range_to_bounds(slot_keys[i + 1])
            if next_start is not None and cur_end is not None:
                gap = next_start - cur_end
                declared = max((f.get("break") or 0) for f in slot)
                brk = max(gap, declared)
                if brk and brk > 0:
                    lines.append(f"<i>–ü–µ—Ä–µ—Ä—ã–≤ {brk} –º–∏–Ω—É—Ç.</i>")

    return "\n".join(lines).rstrip()

def _group_id(g: Dict[str, Any]):
    return g.get("id") or g.get("group_id") or g.get("gid") or g.get("uuid") or g.get("_id")

def _group_name(g: Dict[str, Any]) -> str:
    return (
        g.get("name")
        or g.get("title")
        or g.get("label")
        or g.get("group")
        or g.get("group_name")
        or g.get("fullname")
        or g.get("display")
        or str(g.get("id") or g)
    )

def _kb_ranges(gid: str = None, gname: str = None, user_id: int = None) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="rng:today"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="rng:tomorrow"),
        ],
        [
            InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="rng:this_week"),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="rng:next_week"),
        ],
        [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="rng:pick_date"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="rng:change_group"),
        ],
    ]

    # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    if gid and gname and user_id:
        if is_fav_group(user_id, gid):
            rows.append([InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"fav_group:remove:{gid}")])
        else:
            rows.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_group:add:{gid}")])

    rows.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="rng:cancel")])
    return InlineKeyboardMarkup(rows)

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê ==================

async def jump_in_with_group_from_favorites(update, context, group_id: str, group_name: str):
    context.user_data["group"] = {"id": str(group_id), "name": str(group_name)}

    kb = _kb_ranges(str(group_id), str(group_name), update.effective_user.id)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>{group_name}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb,
        )
    else:
        await update.effective_chat.send_message(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>{group_name}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb,
        )
    return CHOOSE_RANGE

def reset_selection(context):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) –≤ user_data."""
    for k in ("group", "group_candidates", "teacher_id", "teacher_name", "teachers_map"):
        context.user_data.pop(k, None)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # entry-point –∏–∑ –º–µ–Ω—é: –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ callback_query, —Ç–∞–∫ –∏ /schedul
    reset_selection(context)
    if update.callback_query:
        await update.callback_query.answer()
        send = update.callback_query.edit_message_text
    else:
        send = update.message.reply_text

    await send(
        "‚ö†Ô∏è P.s. –ü–æ—Å–ª–µ 23:00 –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –æ—à–∏–±–∫–∞ –Ω–µ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ\n\n2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò19-6):",
        parse_mode=ParseMode.HTML,
    )
    return ASK_GROUP

async def favorite_group_entry(update, context):
    q = update.callback_query
    await q.answer()
    fav = context.user_data.get("group") or context.user_data.get("fav_group")
    if not fav:
        await q.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Ä–∞–∑–¥–µ–ª–µ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        return ASK_GROUP

    context.user_data["group"] = fav
    gid, gname = _group_id(fav), _group_name(fav)

    await q.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: <b>{gname}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_ranges(gid, gname, update.effective_user.id),
    )
    return CHOOSE_RANGE

async def ask_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = (update.message.text or "").strip()

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏/–≤ –º–µ–Ω—é ‚Äì –≤—ã—Ö–æ–¥–∏–º
    if text.lower() in {"–º–µ–Ω—é", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–æ—Ç–º–µ–Ω–∞", "cancel"}:
        await update.message.reply_text(WELCOME_TEXT_MAIN, reply_markup=_main_menu_kb())
        return ConversationHandler.END
    query_text = (update.message.text or "").strip()
    if not query_text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP
    try:
        groups = fa.search_group(query_text)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP

    if not groups:
        await update.message.reply_text("–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫—É—é –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP

    query_l = query_text.lower()
    exact = [g for g in groups if _group_name(g).strip().lower() == query_l]
    chosen = exact[0] if len(exact) == 1 else (groups[0] if len(groups) == 1 else None)
    if chosen:
        context.user_data["group"] = chosen
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>{_group_name(chosen)}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            parse_mode=ParseMode.HTML,
            reply_markup=_kb_ranges(_group_id(chosen), _group_name(chosen), update.effective_user.id),
        )
        return CHOOSE_RANGE

    only_groups = [g for g in groups if g.get("type") == "group"] or groups
    only_groups = only_groups[:10]

    buttons = [[InlineKeyboardButton(_group_name(g), callback_data=f"grp:{_group_id(g)}")] for g in only_groups]
    buttons.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="grp:retry")])

    await update.message.reply_text(
        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    context.user_data["group_candidates"] = {str(_group_id(g)): g for g in only_groups}
    return CHOOSE_GROUP

async def choose_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "grp:retry":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –µ—â—ë —Ä–∞–∑:")
        return ASK_GROUP
    if not data.startswith("grp:"):
        return CHOOSE_GROUP

    gid = data.split(":", 1)[1]
    candidates = context.user_data.get("group_candidates") or {}
    chosen = candidates.get(gid)
    if not chosen:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return ASK_GROUP

    context.user_data["group"] = chosen
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>{_group_name(chosen)}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_ranges(_group_id(chosen), _group_name(chosen), update.effective_user.id),
    )
    return CHOOSE_RANGE

async def exit_to_top_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é
    from main import button_handler  # –∏–ª–∏ –æ—Ç–∫—É–¥–∞ –æ–Ω —É —Ç–µ–±—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
    await button_handler(update, context)
    return ConversationHandler.END

async def start_cmd_exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # /start –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
    await update.effective_chat.send_message(
        WELCOME_TEXT_MAIN,
        reply_markup=_main_menu_kb()
    )
    return ConversationHandler.END

async def choose_range(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action = query.data



    # 1) –û–±—â–∏–µ –≤–µ—Ç–∫–∏, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if action == "rng:cancel":
        try:
            await query.edit_message_text(WELCOME_TEXT_MAIN, reply_markup=_main_menu_kb())
        except Exception:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text=WELCOME_TEXT_MAIN, reply_markup=_main_menu_kb())
        return ConversationHandler.END

    if action == "rng:change_group":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        return ASK_GROUP

    # 2) –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É (–Ω—É–∂–Ω–∞ –∏ –¥–ª—è fav_* –∏ –¥–ª—è rng:*)
    group = context.user_data.get("group")
    if not group:
        await query.edit_message_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        return ASK_GROUP

    gid = _group_id(group)
    gname = _group_name(group)
    if not gid:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≥—Ä—É–ø–ø—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:")
        return ASK_GROUP

    user_id = update.effective_user.id

    # 3) –ö–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    if action.startswith("fav_group:add:"):
        add_gid = action.split(":", 2)[2]
        add_fav_group(user_id, add_gid, gname if add_gid == str(gid) else add_gid)

        # ‚¨áÔ∏è –í–ê–ñ–ù–û: —Å—Ä–∞–∑—É –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç—ã –∏ –ø–µ—Ä–µ–≤–µ—à–∏–≤–∞–µ–º –¥–∂–æ–±—ã –î–õ–Ø –≠–¢–û–ì–û –Æ–ó–ï–†–ê
        try:
            from settings import ensure_defaults_for_user, schedule_jobs_for_user
            ensure_defaults_for_user(user_id)  # 'tomorrow' + ['19:00'] –µ—Å–ª–∏ –ø—É—Å—Ç–æ
            schedule_jobs_for_user(context.application, user_id)  # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è user_id
        except ImportError:
            # –µ—Å–ª–∏ —É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç schedule_jobs_for_user ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
            from settings import ensure_defaults_for_user, register_notification_jobs
            ensure_defaults_for_user(user_id)
            register_notification_jobs(context.application)  # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –¥–∂–æ–±—ã –¥–ª—è –≤—Å–µ—Ö

        try:
            await query.edit_message_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{gname}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                parse_mode=ParseMode.HTML,
                reply_markup=_kb_ranges(gid, gname, user_id),
            )
        except Exception:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{gname}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                parse_mode=ParseMode.HTML,
                reply_markup=_kb_ranges(gid, gname, user_id),
            )
        return CHOOSE_RANGE

    if action.startswith("fav_group:remove:"):
        rm_gid = action.split(":", 2)[2]
        remove_fav_group(user_id, rm_gid)

        try:
            from settings import schedule_jobs_for_user
            schedule_jobs_for_user(context.application, user_id)
        except ImportError:
            from settings import register_notification_jobs
            register_notification_jobs(context.application)
            await query.edit_message_text(
                f"üö´ –ì—Ä—É–ø–ø–∞ <b>{gname}</b> —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                parse_mode=ParseMode.HTML,
                reply_markup=_kb_ranges(gid, gname, user_id),
            )
        except Exception:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üö´ –ì—Ä—É–ø–ø–∞ <b>{gname}</b> —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                parse_mode=ParseMode.HTML,
                reply_markup=_kb_ranges(gid, gname, user_id),
            )
        return CHOOSE_RANGE

    # 4) –î–∞–ª—å—à–µ ‚Äî –≤—Å–µ –≤–µ—Ç–∫–∏ rng:...
    today = datetime.now()

    if action == "rng:today":
        d = today
        ds = _to_api_date(d)
        try:
            chat_id = update.effective_chat.id
            raw = fa.timetable_group(gid)
            lessons = _filter_lessons_by_date(raw, ds)
            text = _fmt_day(ds, lessons, gname)

            # 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=ParseMode.HTML
            )

            # 2Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫)
            date_str = _to_human_date(d)
            try:
                await send_homework_for_date(update, context, gname, date_str)
            except Exception:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–∫—É (today), –ø—Ä–æ–ø—É—Å–∫–∞—é –±–µ–∑ –≤—ã–≤–æ–¥–∞")

            # 3Ô∏è‚É£ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=_kb_ranges(gid, gname, user_id)
            )

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable today: %s", e)
            await query.edit_message_text(
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=_kb_ranges(gid, gname, update.effective_user.id)
            )
        return CHOOSE_RANGE


    if action == "rng:tomorrow":
        d = today + timedelta(days=1)
        ds = _to_api_date(d)
        try:
            chat_id = update.effective_chat.id
            start = _to_api_date(today)
            end = _to_api_date(today + timedelta(days=1))
            raw = fa.timetable_group(gid, start, end)
            grouped = _group_by_date(raw)
            lessons = grouped.get(ds, [])
            text = _fmt_day(ds, lessons, gname)

            # 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=ParseMode.HTML
            )

            # 2Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫)
            date_str = _to_human_date(d)
            try:
                await send_homework_for_date(update, context, gname, date_str)
            except Exception:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–∫—É (tomorrow), –ø—Ä–æ–ø—É—Å–∫–∞—é –±–µ–∑ –≤—ã–≤–æ–¥–∞")

            # 3Ô∏è‚É£ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=_kb_ranges(gid, gname, user_id)
            )

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable tomorrow: %s", e)
            await query.edit_message_text(
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=_kb_ranges(gid, gname, user_id)
            )
        return CHOOSE_RANGE

    if action == "rng:this_week":
        ws, we = _week_bounds(today)
        ds, de = _to_api_date(ws), _to_api_date(we)
        try:
            raw = fa.timetable_group(gid, ds, de)
            grouped = _group_by_date(raw)  # {'YYYY.MM.DD': [lessons]}
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable this_week: %s", e)
            await query.edit_message_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=_kb_ranges())
            return CHOOSE_RANGE

        await query.edit_message_text(
            f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {gname} –Ω–∞ –Ω–µ–¥–µ–ª—é ({_to_human_date(ws)}‚Äì{_to_human_date(we)})</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –¥–Ω—è–º –Ω–∏–∂–µ ‚¨áÔ∏è",
            parse_mode=ParseMode.HTML,
        )

        chat_id = update.effective_chat.id
        sent_any = False

        # –ï–î–ò–ù–´–ô –ü–†–û–•–û–î –ü–Ω‚Üí–í—Å
        for i in range(7):
            d = ws + timedelta(days=i)
            ds_day = _to_api_date(d)

            lessons_day = grouped.get(ds_day, None)
            if lessons_day is None:
                # –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ –¥–∞–ª —ç—Ç–æ—Ç –¥–µ–Ω—å ‚Äî –¥–æ–±–∏—Ä–∞–µ–º —Ç–æ—á–µ—á–Ω–æ
                try:
                    raw_day = fa.timetable_group(gid, ds_day, ds_day)
                    lessons_day = _filter_lessons_by_date(raw_day, ds_day)
                except Exception:
                    lessons_day = []

            if lessons_day:
                text_day = _fmt_day(ds_day, lessons_day, gname)
                await context.bot.send_message(chat_id=chat_id, text=text_day, parse_mode=ParseMode.HTML)
                date_str = _to_human_date(d)
                await send_homework_for_date(update, context, gname, date_str)
                sent_any = True

        if not sent_any:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")

        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=_kb_ranges(gid, gname, user_id)
        )
        return CHOOSE_RANGE

    if action == "rng:pick_date":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>:",
            parse_mode=ParseMode.HTML,
        )
        return ASK_CUSTOM_DATE

    if action == "rng:next_week":
        ws, we = _week_bounds(today + timedelta(days=7))
        ds, de = _to_api_date(ws), _to_api_date(we)
        try:
            raw = fa.timetable_group(gid, ds, de)
            grouped = _group_by_date(raw)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ timetable next_week: %s", e)
            await query.edit_message_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                          reply_markup=_kb_ranges(gid, gname, user_id))
            return CHOOSE_RANGE

        await query.edit_message_text(
            f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {gname} –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ({_to_human_date(ws)}‚Äì{_to_human_date(we)})</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –¥–Ω—è–º –Ω–∏–∂–µ ‚¨áÔ∏è",
            parse_mode=ParseMode.HTML,
        )

        chat_id = update.effective_chat.id
        sent_any = False

        for i in range(7):
            d = ws + timedelta(days=i)
            ds_day = _to_api_date(d)

            lessons_day = grouped.get(ds_day, None)
            if lessons_day is None:
                try:
                    raw_day = fa.timetable_group(gid, ds_day, ds_day)
                    lessons_day = _filter_lessons_by_date(raw_day, ds_day)
                except Exception:
                    lessons_day = []

            if lessons_day:
                text_day = _fmt_day(ds_day, lessons_day, gname)
                await context.bot.send_message(chat_id=chat_id, text=text_day, parse_mode=ParseMode.HTML)
                date_str = _to_human_date(d)
                await send_homework_for_date(update, context, gname, date_str)
                sent_any = True

        if not sent_any:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.")

        # üëá –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=_kb_ranges(gid, gname, user_id)
        )
        return CHOOSE_RANGE

        # –ï—Å–ª–∏ —Å—é–¥–∞ –¥–æ—à–ª–∏ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.
    await query.answer()
    return CHOOSE_RANGE


async def ask_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    m = DATE_INPUT_RE.match((update.message.text or "").strip())
    if not m:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì")
        return ASK_CUSTOM_DATE

    dd, mm, yyyy = map(int, m.groups())
    try:
        d = datetime(year=yyyy, month=mm, day=dd)
    except ValueError:
        await update.message.reply_text("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_CUSTOM_DATE

    group = context.user_data.get("group")
    if not group:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É: /start")
        return ConversationHandler.END

    gid = _group_id(group)
    gname = _group_name(group)
    if not gid:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≥—Ä—É–ø–ø—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_GROUP

    ds = _to_api_date(d)  # 'YYYY.MM.DD'

    try:
        # 1) –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–µ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        raw = fa.timetable_group(gid, ds, ds)
        lessons = _filter_lessons_by_date(raw, ds)

        # 2) –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî fallback: –Ω–µ–¥–µ–ª—è, –≥–¥–µ –ª–µ–∂–∏—Ç –¥–∞—Ç–∞
        if not lessons:
            ws, we = _week_bounds(d)
            ds_w, de_w = _to_api_date(ws), _to_api_date(we)
            raw_week = fa.timetable_group(gid, ds_w, de_w)
            grouped = _group_by_date(raw_week)
            lessons = grouped.get(ds, [])
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ timetable by date: %s", e)
        await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return CHOOSE_RANGE

    text = _fmt_day(ds, lessons, gname)
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_ranges(gid, gname, update.effective_user.id),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    )

    # –î–æ–º–∞—à–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (–º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏)
    try:
        await send_homework_for_date(update, context, gname, _to_human_date(d))
    except Exception:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–∫—É (custom date), –ø—Ä–æ–ø—É—Å–∫–∞—é")

    return CHOOSE_RANGE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # /cancel –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    chat_id = (update.effective_chat.id if update.effective_chat else None)
    if update.message:
        await update.message.reply_text(
            WELCOME_TEXT_MAIN,
            reply_markup=_main_menu_kb(),
        )
    elif chat_id:
        await context.bot.send_message(
            chat_id=chat_id,
            text=WELCOME_TEXT_MAIN,
            reply_markup=_main_menu_kb(),
        )
    return ConversationHandler.END

# ================== –°–ë–û–†–ö–ê CONVERSATION ==================
def build_schedule_groups_conv():
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start, pattern=r"^schedule_groups$"),
            CommandHandler("schedule", start),
            CallbackQueryHandler(favorite_group_entry, pattern=r"^favorite_group$"),
        ],
        states={
            ASK_GROUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_group),
                # –õ—é–±–∞—è –≤–µ—Ä—Ö–Ω—è—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
                CallbackQueryHandler(exit_to_top_menu, pattern=r"^(schedule|homework|mail|settings)$"),
            ],
            CHOOSE_GROUP: [
                CallbackQueryHandler(choose_group, pattern=r"^grp:"),
                CallbackQueryHandler(exit_to_top_menu, pattern=r"^(schedule|homework|mail|settings)$"),
            ],
            CHOOSE_RANGE: [
                CallbackQueryHandler(choose_range, pattern=r"^rng:"),
                CallbackQueryHandler(choose_range, pattern=r"^fav_group:"),
                CallbackQueryHandler(exit_to_top_menu, pattern=r"^(schedule|homework|mail|settings)$"),
            ],
            ASK_CUSTOM_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_custom_date),
                CallbackQueryHandler(exit_to_top_menu, pattern=r"^(schedule|homework|mail|settings)$"),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("start", start_cmd_exit),  # ‚Üê /start —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –≤—ã—Ö–æ–¥–∏—Ç
        ],
        allow_reentry=True,
        per_message=False,
    )
