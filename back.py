import os
import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler, Defaults
)

from schedule import schedule_menu, schedule_callback
import teachers_schedule as TS  # –º–æ–¥—É–ª—å —Å –ª–æ–≥–∏–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
from homework import *
# ===== –õ–û–ì–ì–ï–†–´ =====
logging.basicConfig(
    level=logging.WARNING,
    format="%(asctime)s | %(levelname)s | %(name)s: %(message)s"
)
log = logging.getLogger("finashka-bot")

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–∫–æ–π.\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]]
    await update.message.reply_text(WELCOME_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "schedule":
        await schedule_menu(update, context)
    elif q.data == "mail":
        await q.edit_message_text("üìß –†–∞–∑–¥–µ–ª —Å –ø–æ—á—Ç–æ–π –ø–æ–∫–∞ –ø—É—Å—Ç.")
    elif q.data == "homework":
        await homework_callback(update, context)

# –≤—Ö–æ–¥ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å¬ª
async def start_teacher_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if q:
        await q.answer()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await q.edit_message_text(
            "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>):",
            parse_mode=ParseMode.HTML
        )
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–π–¥—ë–º –Ω–µ –∏–∑ callback
        await update.effective_chat.send_message(
            "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>):",
            parse_mode=ParseMode.HTML
        )
    return TS.ASK_TEACHER

async def on_error(update: object, context):
    log.exception("Unhandled error: %r", context.error)
    try:
        if hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=False)
    except Exception:
        pass

token_value = "8386694816:AAF-cqnzapG3xvWX2ZNIcSTbBkyms1FcQTY"

def main():
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, —á—Ç–æ–±—ã httpx –Ω–µ –ª–µ–∑ –≤ –Ω–∏—Ö
    for var in ("HTTP_PROXY","HTTPS_PROXY","ALL_PROXY","http_proxy","https_proxy","all_proxy"):
        os.environ.pop(var, None)

    app = (
        ApplicationBuilder()
        .token(token_value)
        .defaults(Defaults(parse_mode=ParseMode.HTML))
        .build()
    )

    # –•–µ–Ω–¥–ª–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(schedule|homework|mail)$"))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, homework.message_handler))
    app.add_handler(CallbackQueryHandler(homework_callback, pattern="^hw_"))
    # –í–Ω—É—Ç—Ä–∏ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª –∏ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª
    app.add_handler(CallbackQueryHandler(schedule_callback, pattern=r"^(schedule_groups|select_group)$"))

    # –î–∏–∞–ª–æ–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–≤—Ö–æ–¥ ‚Äî –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞)
    teacher_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_teacher_from_menu, pattern=r"^teachers_schedule$"),
            CommandHandler("teacher_schedule", TS.cmd_start),
        ],
        states={
            TS.ASK_TEACHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, TS.on_teacher_surname)],
            TS.CHOOSE_TEACHER: [CallbackQueryHandler(TS.on_pick_teacher, pattern=r"^pick_teacher:")],
            TS.CHOOSE_RANGE: [CallbackQueryHandler(TS.on_pick_range, pattern=r"^range:")],
            TS.ASK_CUSTOM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, TS.on_custom_date)],
        },
        fallbacks=[CommandHandler("teacher_schedule", TS.cmd_start)],
        name="timetable_conv",
        persistent=False,
        # –í–ê–ñ–ù–û: per_message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å False, —Ç.–∫. –µ—Å—Ç—å MessageHandler
        per_message=False,
    )
    app.add_handler(teacher_conv)

    app.add_error_handler(on_error)

    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)‚Ä¶")
    # –ù–ò–ß–ï–ì–û –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –î–û run_polling ‚Äî –Ω–∏–∫–∞–∫–∏—Ö asyncio.run!
    app.run_polling(
        poll_interval=1.0,
        timeout=10,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()