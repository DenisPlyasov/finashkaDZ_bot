import os
import logging
from telegram.request import HTTPXRequest
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler, Defaults
)
from schedule_groups import build_schedule_groups_conv, start as groups_start
from schedule import schedule_menu, schedule_callback
import teachers_schedule as TS  # –º–æ–¥—É–ª—å —Å –ª–æ–≥–∏–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
from homework import *
from mail_check import add_mail_handlers, mail_checker_task, start_mail
import asyncio
from telegram.ext import Application, JobQueue
# ===== –õ–û–ì–ì–ï–†–´ =====
logging.basicConfig(
    level=logging.WARNING,
    format="%(asctime)s | %(levelname)s | %(name)s: %(message)s"
)
log = logging.getLogger("finashka-bot")

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö –∏ –¥–∑, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø.\n"
    "–ú—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–µ—Ç–∞ —Ç–µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ: @crop_uhar\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]]
    await update.message.reply_text(WELCOME_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "schedule":
        await schedule_menu(update, context)
    elif q.data == "mail":
        await start_mail(update, context)
    elif q.data == "homework":
        await homework_menu(update, context)
    elif q.data.startswith("hw_"):
        await homework_callback(update, context)

# –≤—Ö–æ–¥ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å¬ª
async def start_teacher_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if q:
        await q.answer()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await q.edit_message_text(
            "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>):",
            parse_mode=ParseMode.HTML
        )
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–π–¥—ë–º –Ω–µ –∏–∑ callback
        await update.effective_chat.send_message(
            "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>):",
            parse_mode=ParseMode.HTML
        )
    return TS.ASK_TEACHER

async def on_error(update: object, context):
    log.exception("Unhandled error: %r", context.error)
    try:
        if hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=False)
    except Exception:
        pass

token_value = open('token.txt').readline()

def main():
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, —á—Ç–æ–±—ã httpx –Ω–µ –ª–µ–∑ –≤ –Ω–∏—Ö
    for var in ("HTTP_PROXY","HTTPS_PROXY","ALL_PROXY","http_proxy","https_proxy","all_proxy"):
        os.environ.pop(var, None)

    request = HTTPXRequest(
        read_timeout=30.0,  # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        write_timeout=30.0,  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–∞
        connect_timeout=30.0,  # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        pool_timeout=30.0,  # –æ–∂–∏–¥–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    )

    app = (
        ApplicationBuilder()
        .token(token_value)
        .request(request)  # <-- –í–ê–ñ–ù–û
        .defaults(Defaults(parse_mode=ParseMode.HTML))
        .build()
    )
    if app.job_queue is None:
        jq = JobQueue()
        jq.set_application(app)
        app.job_queue = jq
    # 0) –î–∏–∞–ª–æ–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ì–†–£–ü–ü ‚Äî –î–û–õ–ñ–ï–ù –∏–¥—Ç–∏ –ø–µ—Ä–≤—ã–º
    from schedule_groups import build_schedule_groups_conv, start as groups_start

# –≤—Å—Ç–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å –≤ mail_check.py

    def add_mail_handlers(application):
        """Register mail handlers in the bot application."""
        from main import start  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é

        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(start_mail, pattern=r"^mail$"),
                # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /mail –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                # CommandHandler("mail", lambda u,c: start_mail(u,c))
            ],
            states={
                MAIL_SELECT_ACCOUNT: [
                    CallbackQueryHandler(mail_select_callback, pattern=r"^(mail_add|mail_select:\d+|to_menu)$")
                ],
                MAIL_ENTER_EMAIL: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, mail_text_handler)
                ],
                MAIL_ENTER_PASSWORD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, mail_text_handler)
                ],
            },
            fallbacks=[
                CallbackQueryHandler(mail_select_callback, pattern=r"^to_menu$")
            ],
            name="mail_conv",
            persistent=False,
            # –≤–∞–∂–Ω–æ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ —á–∞—Ç—É, –∞ –Ω–µ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
            per_message=False,
        )

        application.add_handler(conv_handler)


    schedule_conv = build_schedule_groups_conv(
        entry_points=[
            CallbackQueryHandler(groups_start, pattern=r"^schedule_groups$"),
            CommandHandler("schedule", groups_start),
        ]
    )
    app.add_handler(schedule_conv)

    # 1) –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    app.add_handler(CommandHandler("start", start))

    # 2) –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (—É–±—Ä–∞–ª "mail" –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞)
    app.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(schedule|homework)$"))

    # 3) –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ hw_)
    app.add_handler(CallbackQueryHandler(homework_callback, pattern=r"^hw_"))

    # 4) –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ)
    #app.add_handler(CallbackQueryHandler(schedule_callback, pattern=r"^select_group$"))

    # 5) –î–∏–∞–ª–æ–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teacher_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_teacher_from_menu, pattern=r"^teachers_schedule$"),
            CommandHandler("teacher_schedule", TS.cmd_start),
        ],
        states={
            TS.ASK_TEACHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, TS.on_teacher_surname)],
            TS.CHOOSE_TEACHER: [CallbackQueryHandler(TS.on_pick_teacher, pattern=r"^pick_teacher:")],
            TS.CHOOSE_RANGE: [CallbackQueryHandler(TS.on_pick_range, pattern=r"^range:")],
            TS.ASK_CUSTOM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, TS.on_custom_date)],
        },
        fallbacks=[CommandHandler("teacher_schedule", TS.cmd_start)],
        name="timetable_conv",
        persistent=False,
        per_message=False,
    )
    app.add_handler(teacher_conv)

    # 6) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—á—Ç—ã ‚Äî –î–û–õ–ñ–ù–ê –±—ã—Ç—å –î–û –æ–±—â–µ–≥–æ –ª–æ–≤—Ü–∞ –∫–æ–ª–±—ç–∫–æ–≤
    from mail_check import add_mail_handlers, mail_checker_task
    add_mail_handlers(app)

    # 7) –û–±—â–∏–π –∫–æ–ª–±—ç–∫ (–ª–æ–≤–∏—Ç –ø—Ä–æ—á–∏–µ callback_data) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ
    app.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(schedule|homework|mail|hw_.*)$"))

    # 8) –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—â–∏–µ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))


    # 9) –û—à–∏–±–∫–∏
    app.add_error_handler(on_error)

    # 10) –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã (JobQueue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
    app.job_queue.run_repeating(mail_checker_task, interval=60, first=5)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)‚Ä¶")
    # –ù–ò–ß–ï–ì–û –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –î–û run_polling ‚Äî –Ω–∏–∫–∞–∫–∏—Ö asyncio.run!
    app.run_polling(
        poll_interval=1.0,
        timeout=10,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()