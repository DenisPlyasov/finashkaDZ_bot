import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler, Defaults, JobQueue
)
from telegram.request import HTTPXRequest
from schedule_groups import build_schedule_groups_conv, start as groups_start
from schedule import schedule_menu, schedule_callback
import teachers_schedule as TS
from settings import add_settings_handlers, register_notification_jobs
from homework import *
from mail_check import add_mail_handlers, mail_checker_task, start_mail

# ===== –õ–û–ì–ì–ï–† =====
logging.basicConfig(
    level=logging.WARNING,
    format="%(asctime)s | %(levelname)s | %(name)s: %(message)s"
)
log = logging.getLogger("finashka-bot")


# ===== –ö–ê–ù–ê–õ –î–õ–Ø –ü–û–î–ü–ò–°–ö–ò =====
CHANNEL_LINK = open("required_chanel_link.txt", "r", encoding="utf-8").readline().strip()
CHANNEL_USERNAME = open("required_chaned_id.txt", "r", encoding="utf-8").readline().strip()  # username –∫–∞–Ω–∞–ª–∞ –¥–ª—è get_chat_member

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
    "–ú–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö –∏ –¥–∑, —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø.\n"
    "–ú—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–µ—Ç–∞ —Ç–µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ: @question_finashkadzbot\n\n"
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
ASK_SUBSCRIPTION = 0

# ===== –§–£–ù–ö–¶–ò–ò =====
async def check_user_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ("member", "creator", "administrator")
    except Exception:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = update.effective_user.id
    try:
        context.user_data.clear()
        if update.effective_chat:
            context.application.chat_data.pop(update.effective_chat.id, None)
    except Exception:
        pass
    if await check_user_subscription(user_id, context):
        await show_main_menu(update, context)
        return ConversationHandler.END
    else:
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")]
        ]
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_SUBSCRIPTION

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏"""
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id

    if await check_user_subscription(user_id, context):
        await q.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
        await show_main_menu(q, context)
        return ConversationHandler.END
    else:
        await q.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        return ASK_SUBSCRIPTION

def reset_selection(context):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥–∏ –Ω–µ –∑–∞–ª–∏–ø–∞–ª–∏."""
    for k in ("group", "group_candidates", "teacher_id", "teacher_name",
              "teachers_map", "mail_state", "mail_email", "hw_action"):
        context.user_data.pop(k, None)

async def show_main_menu(update_or_q, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [[
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"),
        InlineKeyboardButton("–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data="homework"),
        InlineKeyboardButton("–ü–æ—á—Ç–∞", callback_data="mail"),
    ]]
    if isinstance(update_or_q, Update):
        await update_or_q.message.reply_text(WELCOME_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))
    else:  # callback_query
        await update_or_q.message.reply_text(WELCOME_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id

    if not await check_user_subscription(user_id, context):
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")]
        ]
        await q.edit_message_text(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if q.data == "schedule":
        await schedule_menu(update, context)
    elif q.data == "mail":
        await start_mail(update, context)
    elif q.data == "homework":
        await homework_menu(update, context)
    elif q.data.startswith("hw_"):
        await homework_callback(update, context)

async def start_teacher_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    q = update.callback_query
    user_id = q.from_user.id if q else update.effective_user.id
    if not await check_user_subscription(user_id, context):
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")]
        ]
        if q:
            await q.edit_message_text(
                "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.effective_chat.send_message(
                "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return ConversationHandler.END

    if q:
        await q.answer()
        await q.edit_message_text(
            "‚ö†Ô∏è P.s. –ü–æ—Å–ª–µ 23:00 –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.\n\n2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b> \n" "(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>): ",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.effective_chat.send_message(
            "‚ö†Ô∏è P.s. –ü–æ—Å–ª–µ 23:00 –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.\n\n2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b> \n" "(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>): ",
            parse_mode=ParseMode.HTML
        )
    return TS.ASK_TEACHER

from telegram.error import BadRequest
import traceback

async def on_error(update: object, context):
    error = context.error

    try:
        # 1Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö callback-–æ–≤ (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏–π)
        if isinstance(error, BadRequest) and (
            "Query is too old" in str(error)
            or "query id is invalid" in str(error)
            or "response timeout expired" in str(error)
        ):
            # –ü—Ä–æ—Å—Ç–æ —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–µ –ø–∞–¥–∞–µ–º
            log.warning("‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback (Query too old / invalid id)")
            return

        # 2Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ —Ä–æ–Ω—è–µ–º –±–æ—Ç–∞
        log.exception("‚ùó Unhandled error: %r", error)
        log.debug("".join(traceback.format_exception(None, error, error.__traceback__)))

        # 3Ô∏è‚É£ –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ callback –∂–∏–≤–æ–π)
        if hasattr(update, "callback_query") and update.callback_query:
            try:
                await update.callback_query.answer(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    show_alert=False
                )
            except Exception:
                pass  # –µ—Å–ª–∏ callback —É–∂–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    except Exception as e:
        log.critical("–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ on_error(): %s", e)

def reset_selection(context):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) –≤ user_data."""
    for k in ("group", "group_candidates", "teacher_id", "teacher_name", "teachers_map"):
        context.user_data.pop(k, None)

def main():
    for var in ("HTTP_PROXY","HTTPS_PROXY","ALL_PROXY","http_proxy","https_proxy","all_proxy"):
        os.environ.pop(var, None)

    request = HTTPXRequest(
        read_timeout=30.0,
        write_timeout=30.0,
        connect_timeout=30.0,
        pool_timeout=30.0,
    )

    app = (
        ApplicationBuilder()
        .token(open('token.txt').readline())
        .request(request)
        .defaults(Defaults(parse_mode=ParseMode.HTML))
        .build()
    )

    if app.job_queue is None:
        jq = JobQueue()
        jq.set_application(app)
        app.job_queue = jq

    # ===== –†–ê–ó–ì–û–í–û–† –î–õ–Ø –ü–û–î–ü–ò–°–ö–ò =====
    ssubs_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ASK_SUBSCRIPTION: [CallbackQueryHandler(check_subscription, pattern="^check_subs$")]},
        fallbacks=[CommandHandler("start", start)],
        name="subscription_conv",
        per_message=False,
        persistent=False,
    )
    app.add_handler(ssubs_conv, group=0)

    # 2) –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø (ConversationHandler —É–∂–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤ build_schedule_groups_conv)
    schedule_conv = build_schedule_groups_conv()
    app.add_handler(schedule_conv, group=0)

    # 3) –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teacher_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(TS.start_teacher_from_menu, pattern=r"^teachers_schedule$"),
            # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: CommandHandler("teacher_schedule", TS.teacher_schedule_cmd),
        ],
        states={
            TS.ASK_TEACHER:    [MessageHandler(filters.TEXT & ~filters.COMMAND, TS.on_teacher_surname)],
            TS.CHOOSE_TEACHER: [CallbackQueryHandler(TS.on_pick_teacher, pattern=r"^pick_teacher:")],
            TS.CHOOSE_RANGE:   [CallbackQueryHandler(TS.on_pick_range, pattern=r"^(range:|fav_teacher:)")],
            TS.ASK_CUSTOM_DATE:[MessageHandler(filters.TEXT & ~filters.COMMAND, TS.on_custom_date)],
        },
        fallbacks=[
            CommandHandler("cancel", TS.cancel),
            # /start –≤ —ç—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ª–∏–ø–∞–ª
            CommandHandler("start", lambda u, c: ConversationHandler.END),
        ],
        allow_reentry=True,
        name="teacher_conv",
        per_message=False,
        persistent=False,
    )
    app.add_handler(teacher_conv, group=0)

    # 4) –ü–æ—á—Ç–∞ (—Ä–∞–∑–≥–æ–≤–æ—Ä –≤–Ω—É—Ç—Ä–∏ add_mail_handlers)
    add_mail_handlers(app)  # –ø—É—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ group=0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # 5) –ö–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    app.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(schedule|homework|mail|hw_.*)$"), group=0)

    # 6) –ì–õ–û–ë–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ (–¥–æ–º–∞—à–∫–∞ –∏ –ø—Ä–æ—á–µ–µ) ‚Äî —Ç–æ–ª—å–∫–æ –≤ group=1!
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler), group=1)

    # 7) –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(on_error)

    add_settings_handlers(app)
    register_notification_jobs(app)
    app.job_queue.run_repeating(mail_checker_task, interval=60, first=5)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)‚Ä¶")
    app.run_polling(
        poll_interval=1.0,
        timeout=10,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()